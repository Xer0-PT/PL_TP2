Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> command
Rule 2     program -> program command
Rule 3     command -> forward NUMBER
Rule 4     command -> fd NUMBER
Rule 5     command -> forward : VAR
Rule 6     command -> fd : VAR
Rule 7     command -> right NUMBER
Rule 8     command -> rt NUMBER
Rule 9     command -> right : VAR
Rule 10    command -> rt : VAR
Rule 11    command -> back NUMBER
Rule 12    command -> bk NUMBER
Rule 13    command -> back : VAR
Rule 14    command -> bk : VAR
Rule 15    command -> left NUMBER
Rule 16    command -> lt NUMBER
Rule 17    command -> left : VAR
Rule 18    command -> lt : VAR
Rule 19    command -> setpos [ NUMBER NUMBER ]
Rule 20    command -> setxy NUMBER NUMBER
Rule 21    command -> setpos [ : VAR NUMBER ]
Rule 22    command -> setpos [ NUMBER : VAR ]
Rule 23    command -> setpos [ : VAR : VAR ]
Rule 24    command -> setxy : VAR NUMBER
Rule 25    command -> setxy NUMBER : VAR
Rule 26    command -> setxy : VAR : VAR
Rule 27    command -> setx NUMBER
Rule 28    command -> setx : VAR
Rule 29    command -> sety NUMBER
Rule 30    command -> sety : VAR
Rule 31    command -> home
Rule 32    command -> pendown
Rule 33    command -> pd
Rule 34    command -> penup
Rule 35    command -> pu
Rule 36    command -> setpencolor [ NUMBER NUMBER NUMBER ]
Rule 37    command -> setpencolor [ NUMBER NUMBER : VAR ]
Rule 38    command -> setpencolor [ NUMBER : VAR NUMBER ]
Rule 39    command -> setpencolor [ NUMBER : VAR : VAR ]
Rule 40    command -> setpencolor [ : VAR NUMBER NUMBER ]
Rule 41    command -> setpencolor [ : VAR NUMBER : VAR ]
Rule 42    command -> setpencolor [ : VAR : VAR NUMBER ]
Rule 43    command -> setpencolor [ : VAR : VAR : VAR ]
Rule 44    command -> make " VAR NUMBER
Rule 45    command -> make " VAR : VAR OPERATOR NUMBER
Rule 46    command -> make " VAR NUMBER OPERATOR : VAR
Rule 47    command -> repeat NUMBER [ program ]
Rule 48    command -> repeat : VAR [ program ]
Rule 49    command -> while [ : VAR SIGN NUMBER ] [ program ]

Terminals, with rules where they appear

"                    : 44 45 46
:                    : 5 6 9 10 13 14 17 18 21 22 23 23 24 25 26 26 28 30 37 38 39 39 40 41 41 42 42 43 43 43 45 46 48 49
NUMBER               : 3 4 7 8 11 12 15 16 19 19 20 20 21 22 24 25 27 29 36 36 36 37 37 38 38 39 40 40 41 42 44 45 46 47 49
OPERATOR             : 45 46
SIGN                 : 49
VAR                  : 5 6 9 10 13 14 17 18 21 22 23 23 24 25 26 26 28 30 37 38 39 39 40 41 41 42 42 43 43 43 44 45 45 46 46 48 49
[                    : 19 21 22 23 36 37 38 39 40 41 42 43 47 48 49 49
]                    : 19 21 22 23 36 37 38 39 40 41 42 43 47 48 49 49
back                 : 11 13
bk                   : 12 14
error                : 
fd                   : 4 6
forward              : 3 5
home                 : 31
left                 : 15 17
lt                   : 16 18
make                 : 44 45 46
pd                   : 33
pendown              : 32
penup                : 34
pu                   : 35
repeat               : 47 48
right                : 7 9
rt                   : 8 10
setpencolor          : 36 37 38 39 40 41 42 43
setpos               : 19 21 22 23
setx                 : 27 28
setxy                : 20 24 25 26
sety                 : 29 30
while                : 49

Nonterminals, with rules where they appear

command              : 1 2
program              : 2 47 48 49 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . forward NUMBER
    (4) command -> . fd NUMBER
    (5) command -> . forward : VAR
    (6) command -> . fd : VAR
    (7) command -> . right NUMBER
    (8) command -> . rt NUMBER
    (9) command -> . right : VAR
    (10) command -> . rt : VAR
    (11) command -> . back NUMBER
    (12) command -> . bk NUMBER
    (13) command -> . back : VAR
    (14) command -> . bk : VAR
    (15) command -> . left NUMBER
    (16) command -> . lt NUMBER
    (17) command -> . left : VAR
    (18) command -> . lt : VAR
    (19) command -> . setpos [ NUMBER NUMBER ]
    (20) command -> . setxy NUMBER NUMBER
    (21) command -> . setpos [ : VAR NUMBER ]
    (22) command -> . setpos [ NUMBER : VAR ]
    (23) command -> . setpos [ : VAR : VAR ]
    (24) command -> . setxy : VAR NUMBER
    (25) command -> . setxy NUMBER : VAR
    (26) command -> . setxy : VAR : VAR
    (27) command -> . setx NUMBER
    (28) command -> . setx : VAR
    (29) command -> . sety NUMBER
    (30) command -> . sety : VAR
    (31) command -> . home
    (32) command -> . pendown
    (33) command -> . pd
    (34) command -> . penup
    (35) command -> . pu
    (36) command -> . setpencolor [ NUMBER NUMBER NUMBER ]
    (37) command -> . setpencolor [ NUMBER NUMBER : VAR ]
    (38) command -> . setpencolor [ NUMBER : VAR NUMBER ]
    (39) command -> . setpencolor [ NUMBER : VAR : VAR ]
    (40) command -> . setpencolor [ : VAR NUMBER NUMBER ]
    (41) command -> . setpencolor [ : VAR NUMBER : VAR ]
    (42) command -> . setpencolor [ : VAR : VAR NUMBER ]
    (43) command -> . setpencolor [ : VAR : VAR : VAR ]
    (44) command -> . make " VAR NUMBER
    (45) command -> . make " VAR : VAR OPERATOR NUMBER
    (46) command -> . make " VAR NUMBER OPERATOR : VAR
    (47) command -> . repeat NUMBER [ program ]
    (48) command -> . repeat : VAR [ program ]
    (49) command -> . while [ : VAR SIGN NUMBER ] [ program ]

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23

    program                        shift and go to state 1
    command                        shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . command
    (3) command -> . forward NUMBER
    (4) command -> . fd NUMBER
    (5) command -> . forward : VAR
    (6) command -> . fd : VAR
    (7) command -> . right NUMBER
    (8) command -> . rt NUMBER
    (9) command -> . right : VAR
    (10) command -> . rt : VAR
    (11) command -> . back NUMBER
    (12) command -> . bk NUMBER
    (13) command -> . back : VAR
    (14) command -> . bk : VAR
    (15) command -> . left NUMBER
    (16) command -> . lt NUMBER
    (17) command -> . left : VAR
    (18) command -> . lt : VAR
    (19) command -> . setpos [ NUMBER NUMBER ]
    (20) command -> . setxy NUMBER NUMBER
    (21) command -> . setpos [ : VAR NUMBER ]
    (22) command -> . setpos [ NUMBER : VAR ]
    (23) command -> . setpos [ : VAR : VAR ]
    (24) command -> . setxy : VAR NUMBER
    (25) command -> . setxy NUMBER : VAR
    (26) command -> . setxy : VAR : VAR
    (27) command -> . setx NUMBER
    (28) command -> . setx : VAR
    (29) command -> . sety NUMBER
    (30) command -> . sety : VAR
    (31) command -> . home
    (32) command -> . pendown
    (33) command -> . pd
    (34) command -> . penup
    (35) command -> . pu
    (36) command -> . setpencolor [ NUMBER NUMBER NUMBER ]
    (37) command -> . setpencolor [ NUMBER NUMBER : VAR ]
    (38) command -> . setpencolor [ NUMBER : VAR NUMBER ]
    (39) command -> . setpencolor [ NUMBER : VAR : VAR ]
    (40) command -> . setpencolor [ : VAR NUMBER NUMBER ]
    (41) command -> . setpencolor [ : VAR NUMBER : VAR ]
    (42) command -> . setpencolor [ : VAR : VAR NUMBER ]
    (43) command -> . setpencolor [ : VAR : VAR : VAR ]
    (44) command -> . make " VAR NUMBER
    (45) command -> . make " VAR : VAR OPERATOR NUMBER
    (46) command -> . make " VAR NUMBER OPERATOR : VAR
    (47) command -> . repeat NUMBER [ program ]
    (48) command -> . repeat : VAR [ program ]
    (49) command -> . while [ : VAR SIGN NUMBER ] [ program ]

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23

    command                        shift and go to state 24

state 2

    (1) program -> command .

    forward         reduce using rule 1 (program -> command .)
    fd              reduce using rule 1 (program -> command .)
    right           reduce using rule 1 (program -> command .)
    rt              reduce using rule 1 (program -> command .)
    back            reduce using rule 1 (program -> command .)
    bk              reduce using rule 1 (program -> command .)
    left            reduce using rule 1 (program -> command .)
    lt              reduce using rule 1 (program -> command .)
    setpos          reduce using rule 1 (program -> command .)
    setxy           reduce using rule 1 (program -> command .)
    setx            reduce using rule 1 (program -> command .)
    sety            reduce using rule 1 (program -> command .)
    home            reduce using rule 1 (program -> command .)
    pendown         reduce using rule 1 (program -> command .)
    pd              reduce using rule 1 (program -> command .)
    penup           reduce using rule 1 (program -> command .)
    pu              reduce using rule 1 (program -> command .)
    setpencolor     reduce using rule 1 (program -> command .)
    make            reduce using rule 1 (program -> command .)
    repeat          reduce using rule 1 (program -> command .)
    while           reduce using rule 1 (program -> command .)
    $end            reduce using rule 1 (program -> command .)
    ]               reduce using rule 1 (program -> command .)


state 3

    (3) command -> forward . NUMBER
    (5) command -> forward . : VAR

    NUMBER          shift and go to state 25
    :               shift and go to state 26


state 4

    (4) command -> fd . NUMBER
    (6) command -> fd . : VAR

    NUMBER          shift and go to state 27
    :               shift and go to state 28


state 5

    (7) command -> right . NUMBER
    (9) command -> right . : VAR

    NUMBER          shift and go to state 29
    :               shift and go to state 30


state 6

    (8) command -> rt . NUMBER
    (10) command -> rt . : VAR

    NUMBER          shift and go to state 31
    :               shift and go to state 32


state 7

    (11) command -> back . NUMBER
    (13) command -> back . : VAR

    NUMBER          shift and go to state 33
    :               shift and go to state 34


state 8

    (12) command -> bk . NUMBER
    (14) command -> bk . : VAR

    NUMBER          shift and go to state 35
    :               shift and go to state 36


state 9

    (15) command -> left . NUMBER
    (17) command -> left . : VAR

    NUMBER          shift and go to state 37
    :               shift and go to state 38


state 10

    (16) command -> lt . NUMBER
    (18) command -> lt . : VAR

    NUMBER          shift and go to state 39
    :               shift and go to state 40


state 11

    (19) command -> setpos . [ NUMBER NUMBER ]
    (21) command -> setpos . [ : VAR NUMBER ]
    (22) command -> setpos . [ NUMBER : VAR ]
    (23) command -> setpos . [ : VAR : VAR ]

    [               shift and go to state 41


state 12

    (20) command -> setxy . NUMBER NUMBER
    (24) command -> setxy . : VAR NUMBER
    (25) command -> setxy . NUMBER : VAR
    (26) command -> setxy . : VAR : VAR

    NUMBER          shift and go to state 42
    :               shift and go to state 43


state 13

    (27) command -> setx . NUMBER
    (28) command -> setx . : VAR

    NUMBER          shift and go to state 44
    :               shift and go to state 45


state 14

    (29) command -> sety . NUMBER
    (30) command -> sety . : VAR

    NUMBER          shift and go to state 46
    :               shift and go to state 47


state 15

    (31) command -> home .

    forward         reduce using rule 31 (command -> home .)
    fd              reduce using rule 31 (command -> home .)
    right           reduce using rule 31 (command -> home .)
    rt              reduce using rule 31 (command -> home .)
    back            reduce using rule 31 (command -> home .)
    bk              reduce using rule 31 (command -> home .)
    left            reduce using rule 31 (command -> home .)
    lt              reduce using rule 31 (command -> home .)
    setpos          reduce using rule 31 (command -> home .)
    setxy           reduce using rule 31 (command -> home .)
    setx            reduce using rule 31 (command -> home .)
    sety            reduce using rule 31 (command -> home .)
    home            reduce using rule 31 (command -> home .)
    pendown         reduce using rule 31 (command -> home .)
    pd              reduce using rule 31 (command -> home .)
    penup           reduce using rule 31 (command -> home .)
    pu              reduce using rule 31 (command -> home .)
    setpencolor     reduce using rule 31 (command -> home .)
    make            reduce using rule 31 (command -> home .)
    repeat          reduce using rule 31 (command -> home .)
    while           reduce using rule 31 (command -> home .)
    $end            reduce using rule 31 (command -> home .)
    ]               reduce using rule 31 (command -> home .)


state 16

    (32) command -> pendown .

    forward         reduce using rule 32 (command -> pendown .)
    fd              reduce using rule 32 (command -> pendown .)
    right           reduce using rule 32 (command -> pendown .)
    rt              reduce using rule 32 (command -> pendown .)
    back            reduce using rule 32 (command -> pendown .)
    bk              reduce using rule 32 (command -> pendown .)
    left            reduce using rule 32 (command -> pendown .)
    lt              reduce using rule 32 (command -> pendown .)
    setpos          reduce using rule 32 (command -> pendown .)
    setxy           reduce using rule 32 (command -> pendown .)
    setx            reduce using rule 32 (command -> pendown .)
    sety            reduce using rule 32 (command -> pendown .)
    home            reduce using rule 32 (command -> pendown .)
    pendown         reduce using rule 32 (command -> pendown .)
    pd              reduce using rule 32 (command -> pendown .)
    penup           reduce using rule 32 (command -> pendown .)
    pu              reduce using rule 32 (command -> pendown .)
    setpencolor     reduce using rule 32 (command -> pendown .)
    make            reduce using rule 32 (command -> pendown .)
    repeat          reduce using rule 32 (command -> pendown .)
    while           reduce using rule 32 (command -> pendown .)
    $end            reduce using rule 32 (command -> pendown .)
    ]               reduce using rule 32 (command -> pendown .)


state 17

    (33) command -> pd .

    forward         reduce using rule 33 (command -> pd .)
    fd              reduce using rule 33 (command -> pd .)
    right           reduce using rule 33 (command -> pd .)
    rt              reduce using rule 33 (command -> pd .)
    back            reduce using rule 33 (command -> pd .)
    bk              reduce using rule 33 (command -> pd .)
    left            reduce using rule 33 (command -> pd .)
    lt              reduce using rule 33 (command -> pd .)
    setpos          reduce using rule 33 (command -> pd .)
    setxy           reduce using rule 33 (command -> pd .)
    setx            reduce using rule 33 (command -> pd .)
    sety            reduce using rule 33 (command -> pd .)
    home            reduce using rule 33 (command -> pd .)
    pendown         reduce using rule 33 (command -> pd .)
    pd              reduce using rule 33 (command -> pd .)
    penup           reduce using rule 33 (command -> pd .)
    pu              reduce using rule 33 (command -> pd .)
    setpencolor     reduce using rule 33 (command -> pd .)
    make            reduce using rule 33 (command -> pd .)
    repeat          reduce using rule 33 (command -> pd .)
    while           reduce using rule 33 (command -> pd .)
    $end            reduce using rule 33 (command -> pd .)
    ]               reduce using rule 33 (command -> pd .)


state 18

    (34) command -> penup .

    forward         reduce using rule 34 (command -> penup .)
    fd              reduce using rule 34 (command -> penup .)
    right           reduce using rule 34 (command -> penup .)
    rt              reduce using rule 34 (command -> penup .)
    back            reduce using rule 34 (command -> penup .)
    bk              reduce using rule 34 (command -> penup .)
    left            reduce using rule 34 (command -> penup .)
    lt              reduce using rule 34 (command -> penup .)
    setpos          reduce using rule 34 (command -> penup .)
    setxy           reduce using rule 34 (command -> penup .)
    setx            reduce using rule 34 (command -> penup .)
    sety            reduce using rule 34 (command -> penup .)
    home            reduce using rule 34 (command -> penup .)
    pendown         reduce using rule 34 (command -> penup .)
    pd              reduce using rule 34 (command -> penup .)
    penup           reduce using rule 34 (command -> penup .)
    pu              reduce using rule 34 (command -> penup .)
    setpencolor     reduce using rule 34 (command -> penup .)
    make            reduce using rule 34 (command -> penup .)
    repeat          reduce using rule 34 (command -> penup .)
    while           reduce using rule 34 (command -> penup .)
    $end            reduce using rule 34 (command -> penup .)
    ]               reduce using rule 34 (command -> penup .)


state 19

    (35) command -> pu .

    forward         reduce using rule 35 (command -> pu .)
    fd              reduce using rule 35 (command -> pu .)
    right           reduce using rule 35 (command -> pu .)
    rt              reduce using rule 35 (command -> pu .)
    back            reduce using rule 35 (command -> pu .)
    bk              reduce using rule 35 (command -> pu .)
    left            reduce using rule 35 (command -> pu .)
    lt              reduce using rule 35 (command -> pu .)
    setpos          reduce using rule 35 (command -> pu .)
    setxy           reduce using rule 35 (command -> pu .)
    setx            reduce using rule 35 (command -> pu .)
    sety            reduce using rule 35 (command -> pu .)
    home            reduce using rule 35 (command -> pu .)
    pendown         reduce using rule 35 (command -> pu .)
    pd              reduce using rule 35 (command -> pu .)
    penup           reduce using rule 35 (command -> pu .)
    pu              reduce using rule 35 (command -> pu .)
    setpencolor     reduce using rule 35 (command -> pu .)
    make            reduce using rule 35 (command -> pu .)
    repeat          reduce using rule 35 (command -> pu .)
    while           reduce using rule 35 (command -> pu .)
    $end            reduce using rule 35 (command -> pu .)
    ]               reduce using rule 35 (command -> pu .)


state 20

    (36) command -> setpencolor . [ NUMBER NUMBER NUMBER ]
    (37) command -> setpencolor . [ NUMBER NUMBER : VAR ]
    (38) command -> setpencolor . [ NUMBER : VAR NUMBER ]
    (39) command -> setpencolor . [ NUMBER : VAR : VAR ]
    (40) command -> setpencolor . [ : VAR NUMBER NUMBER ]
    (41) command -> setpencolor . [ : VAR NUMBER : VAR ]
    (42) command -> setpencolor . [ : VAR : VAR NUMBER ]
    (43) command -> setpencolor . [ : VAR : VAR : VAR ]

    [               shift and go to state 48


state 21

    (44) command -> make . " VAR NUMBER
    (45) command -> make . " VAR : VAR OPERATOR NUMBER
    (46) command -> make . " VAR NUMBER OPERATOR : VAR

    "               shift and go to state 49


state 22

    (47) command -> repeat . NUMBER [ program ]
    (48) command -> repeat . : VAR [ program ]

    NUMBER          shift and go to state 50
    :               shift and go to state 51


state 23

    (49) command -> while . [ : VAR SIGN NUMBER ] [ program ]

    [               shift and go to state 52


state 24

    (2) program -> program command .

    forward         reduce using rule 2 (program -> program command .)
    fd              reduce using rule 2 (program -> program command .)
    right           reduce using rule 2 (program -> program command .)
    rt              reduce using rule 2 (program -> program command .)
    back            reduce using rule 2 (program -> program command .)
    bk              reduce using rule 2 (program -> program command .)
    left            reduce using rule 2 (program -> program command .)
    lt              reduce using rule 2 (program -> program command .)
    setpos          reduce using rule 2 (program -> program command .)
    setxy           reduce using rule 2 (program -> program command .)
    setx            reduce using rule 2 (program -> program command .)
    sety            reduce using rule 2 (program -> program command .)
    home            reduce using rule 2 (program -> program command .)
    pendown         reduce using rule 2 (program -> program command .)
    pd              reduce using rule 2 (program -> program command .)
    penup           reduce using rule 2 (program -> program command .)
    pu              reduce using rule 2 (program -> program command .)
    setpencolor     reduce using rule 2 (program -> program command .)
    make            reduce using rule 2 (program -> program command .)
    repeat          reduce using rule 2 (program -> program command .)
    while           reduce using rule 2 (program -> program command .)
    $end            reduce using rule 2 (program -> program command .)
    ]               reduce using rule 2 (program -> program command .)


state 25

    (3) command -> forward NUMBER .

    forward         reduce using rule 3 (command -> forward NUMBER .)
    fd              reduce using rule 3 (command -> forward NUMBER .)
    right           reduce using rule 3 (command -> forward NUMBER .)
    rt              reduce using rule 3 (command -> forward NUMBER .)
    back            reduce using rule 3 (command -> forward NUMBER .)
    bk              reduce using rule 3 (command -> forward NUMBER .)
    left            reduce using rule 3 (command -> forward NUMBER .)
    lt              reduce using rule 3 (command -> forward NUMBER .)
    setpos          reduce using rule 3 (command -> forward NUMBER .)
    setxy           reduce using rule 3 (command -> forward NUMBER .)
    setx            reduce using rule 3 (command -> forward NUMBER .)
    sety            reduce using rule 3 (command -> forward NUMBER .)
    home            reduce using rule 3 (command -> forward NUMBER .)
    pendown         reduce using rule 3 (command -> forward NUMBER .)
    pd              reduce using rule 3 (command -> forward NUMBER .)
    penup           reduce using rule 3 (command -> forward NUMBER .)
    pu              reduce using rule 3 (command -> forward NUMBER .)
    setpencolor     reduce using rule 3 (command -> forward NUMBER .)
    make            reduce using rule 3 (command -> forward NUMBER .)
    repeat          reduce using rule 3 (command -> forward NUMBER .)
    while           reduce using rule 3 (command -> forward NUMBER .)
    $end            reduce using rule 3 (command -> forward NUMBER .)
    ]               reduce using rule 3 (command -> forward NUMBER .)


state 26

    (5) command -> forward : . VAR

    VAR             shift and go to state 53


state 27

    (4) command -> fd NUMBER .

    forward         reduce using rule 4 (command -> fd NUMBER .)
    fd              reduce using rule 4 (command -> fd NUMBER .)
    right           reduce using rule 4 (command -> fd NUMBER .)
    rt              reduce using rule 4 (command -> fd NUMBER .)
    back            reduce using rule 4 (command -> fd NUMBER .)
    bk              reduce using rule 4 (command -> fd NUMBER .)
    left            reduce using rule 4 (command -> fd NUMBER .)
    lt              reduce using rule 4 (command -> fd NUMBER .)
    setpos          reduce using rule 4 (command -> fd NUMBER .)
    setxy           reduce using rule 4 (command -> fd NUMBER .)
    setx            reduce using rule 4 (command -> fd NUMBER .)
    sety            reduce using rule 4 (command -> fd NUMBER .)
    home            reduce using rule 4 (command -> fd NUMBER .)
    pendown         reduce using rule 4 (command -> fd NUMBER .)
    pd              reduce using rule 4 (command -> fd NUMBER .)
    penup           reduce using rule 4 (command -> fd NUMBER .)
    pu              reduce using rule 4 (command -> fd NUMBER .)
    setpencolor     reduce using rule 4 (command -> fd NUMBER .)
    make            reduce using rule 4 (command -> fd NUMBER .)
    repeat          reduce using rule 4 (command -> fd NUMBER .)
    while           reduce using rule 4 (command -> fd NUMBER .)
    $end            reduce using rule 4 (command -> fd NUMBER .)
    ]               reduce using rule 4 (command -> fd NUMBER .)


state 28

    (6) command -> fd : . VAR

    VAR             shift and go to state 54


state 29

    (7) command -> right NUMBER .

    forward         reduce using rule 7 (command -> right NUMBER .)
    fd              reduce using rule 7 (command -> right NUMBER .)
    right           reduce using rule 7 (command -> right NUMBER .)
    rt              reduce using rule 7 (command -> right NUMBER .)
    back            reduce using rule 7 (command -> right NUMBER .)
    bk              reduce using rule 7 (command -> right NUMBER .)
    left            reduce using rule 7 (command -> right NUMBER .)
    lt              reduce using rule 7 (command -> right NUMBER .)
    setpos          reduce using rule 7 (command -> right NUMBER .)
    setxy           reduce using rule 7 (command -> right NUMBER .)
    setx            reduce using rule 7 (command -> right NUMBER .)
    sety            reduce using rule 7 (command -> right NUMBER .)
    home            reduce using rule 7 (command -> right NUMBER .)
    pendown         reduce using rule 7 (command -> right NUMBER .)
    pd              reduce using rule 7 (command -> right NUMBER .)
    penup           reduce using rule 7 (command -> right NUMBER .)
    pu              reduce using rule 7 (command -> right NUMBER .)
    setpencolor     reduce using rule 7 (command -> right NUMBER .)
    make            reduce using rule 7 (command -> right NUMBER .)
    repeat          reduce using rule 7 (command -> right NUMBER .)
    while           reduce using rule 7 (command -> right NUMBER .)
    $end            reduce using rule 7 (command -> right NUMBER .)
    ]               reduce using rule 7 (command -> right NUMBER .)


state 30

    (9) command -> right : . VAR

    VAR             shift and go to state 55


state 31

    (8) command -> rt NUMBER .

    forward         reduce using rule 8 (command -> rt NUMBER .)
    fd              reduce using rule 8 (command -> rt NUMBER .)
    right           reduce using rule 8 (command -> rt NUMBER .)
    rt              reduce using rule 8 (command -> rt NUMBER .)
    back            reduce using rule 8 (command -> rt NUMBER .)
    bk              reduce using rule 8 (command -> rt NUMBER .)
    left            reduce using rule 8 (command -> rt NUMBER .)
    lt              reduce using rule 8 (command -> rt NUMBER .)
    setpos          reduce using rule 8 (command -> rt NUMBER .)
    setxy           reduce using rule 8 (command -> rt NUMBER .)
    setx            reduce using rule 8 (command -> rt NUMBER .)
    sety            reduce using rule 8 (command -> rt NUMBER .)
    home            reduce using rule 8 (command -> rt NUMBER .)
    pendown         reduce using rule 8 (command -> rt NUMBER .)
    pd              reduce using rule 8 (command -> rt NUMBER .)
    penup           reduce using rule 8 (command -> rt NUMBER .)
    pu              reduce using rule 8 (command -> rt NUMBER .)
    setpencolor     reduce using rule 8 (command -> rt NUMBER .)
    make            reduce using rule 8 (command -> rt NUMBER .)
    repeat          reduce using rule 8 (command -> rt NUMBER .)
    while           reduce using rule 8 (command -> rt NUMBER .)
    $end            reduce using rule 8 (command -> rt NUMBER .)
    ]               reduce using rule 8 (command -> rt NUMBER .)


state 32

    (10) command -> rt : . VAR

    VAR             shift and go to state 56


state 33

    (11) command -> back NUMBER .

    forward         reduce using rule 11 (command -> back NUMBER .)
    fd              reduce using rule 11 (command -> back NUMBER .)
    right           reduce using rule 11 (command -> back NUMBER .)
    rt              reduce using rule 11 (command -> back NUMBER .)
    back            reduce using rule 11 (command -> back NUMBER .)
    bk              reduce using rule 11 (command -> back NUMBER .)
    left            reduce using rule 11 (command -> back NUMBER .)
    lt              reduce using rule 11 (command -> back NUMBER .)
    setpos          reduce using rule 11 (command -> back NUMBER .)
    setxy           reduce using rule 11 (command -> back NUMBER .)
    setx            reduce using rule 11 (command -> back NUMBER .)
    sety            reduce using rule 11 (command -> back NUMBER .)
    home            reduce using rule 11 (command -> back NUMBER .)
    pendown         reduce using rule 11 (command -> back NUMBER .)
    pd              reduce using rule 11 (command -> back NUMBER .)
    penup           reduce using rule 11 (command -> back NUMBER .)
    pu              reduce using rule 11 (command -> back NUMBER .)
    setpencolor     reduce using rule 11 (command -> back NUMBER .)
    make            reduce using rule 11 (command -> back NUMBER .)
    repeat          reduce using rule 11 (command -> back NUMBER .)
    while           reduce using rule 11 (command -> back NUMBER .)
    $end            reduce using rule 11 (command -> back NUMBER .)
    ]               reduce using rule 11 (command -> back NUMBER .)


state 34

    (13) command -> back : . VAR

    VAR             shift and go to state 57


state 35

    (12) command -> bk NUMBER .

    forward         reduce using rule 12 (command -> bk NUMBER .)
    fd              reduce using rule 12 (command -> bk NUMBER .)
    right           reduce using rule 12 (command -> bk NUMBER .)
    rt              reduce using rule 12 (command -> bk NUMBER .)
    back            reduce using rule 12 (command -> bk NUMBER .)
    bk              reduce using rule 12 (command -> bk NUMBER .)
    left            reduce using rule 12 (command -> bk NUMBER .)
    lt              reduce using rule 12 (command -> bk NUMBER .)
    setpos          reduce using rule 12 (command -> bk NUMBER .)
    setxy           reduce using rule 12 (command -> bk NUMBER .)
    setx            reduce using rule 12 (command -> bk NUMBER .)
    sety            reduce using rule 12 (command -> bk NUMBER .)
    home            reduce using rule 12 (command -> bk NUMBER .)
    pendown         reduce using rule 12 (command -> bk NUMBER .)
    pd              reduce using rule 12 (command -> bk NUMBER .)
    penup           reduce using rule 12 (command -> bk NUMBER .)
    pu              reduce using rule 12 (command -> bk NUMBER .)
    setpencolor     reduce using rule 12 (command -> bk NUMBER .)
    make            reduce using rule 12 (command -> bk NUMBER .)
    repeat          reduce using rule 12 (command -> bk NUMBER .)
    while           reduce using rule 12 (command -> bk NUMBER .)
    $end            reduce using rule 12 (command -> bk NUMBER .)
    ]               reduce using rule 12 (command -> bk NUMBER .)


state 36

    (14) command -> bk : . VAR

    VAR             shift and go to state 58


state 37

    (15) command -> left NUMBER .

    forward         reduce using rule 15 (command -> left NUMBER .)
    fd              reduce using rule 15 (command -> left NUMBER .)
    right           reduce using rule 15 (command -> left NUMBER .)
    rt              reduce using rule 15 (command -> left NUMBER .)
    back            reduce using rule 15 (command -> left NUMBER .)
    bk              reduce using rule 15 (command -> left NUMBER .)
    left            reduce using rule 15 (command -> left NUMBER .)
    lt              reduce using rule 15 (command -> left NUMBER .)
    setpos          reduce using rule 15 (command -> left NUMBER .)
    setxy           reduce using rule 15 (command -> left NUMBER .)
    setx            reduce using rule 15 (command -> left NUMBER .)
    sety            reduce using rule 15 (command -> left NUMBER .)
    home            reduce using rule 15 (command -> left NUMBER .)
    pendown         reduce using rule 15 (command -> left NUMBER .)
    pd              reduce using rule 15 (command -> left NUMBER .)
    penup           reduce using rule 15 (command -> left NUMBER .)
    pu              reduce using rule 15 (command -> left NUMBER .)
    setpencolor     reduce using rule 15 (command -> left NUMBER .)
    make            reduce using rule 15 (command -> left NUMBER .)
    repeat          reduce using rule 15 (command -> left NUMBER .)
    while           reduce using rule 15 (command -> left NUMBER .)
    $end            reduce using rule 15 (command -> left NUMBER .)
    ]               reduce using rule 15 (command -> left NUMBER .)


state 38

    (17) command -> left : . VAR

    VAR             shift and go to state 59


state 39

    (16) command -> lt NUMBER .

    forward         reduce using rule 16 (command -> lt NUMBER .)
    fd              reduce using rule 16 (command -> lt NUMBER .)
    right           reduce using rule 16 (command -> lt NUMBER .)
    rt              reduce using rule 16 (command -> lt NUMBER .)
    back            reduce using rule 16 (command -> lt NUMBER .)
    bk              reduce using rule 16 (command -> lt NUMBER .)
    left            reduce using rule 16 (command -> lt NUMBER .)
    lt              reduce using rule 16 (command -> lt NUMBER .)
    setpos          reduce using rule 16 (command -> lt NUMBER .)
    setxy           reduce using rule 16 (command -> lt NUMBER .)
    setx            reduce using rule 16 (command -> lt NUMBER .)
    sety            reduce using rule 16 (command -> lt NUMBER .)
    home            reduce using rule 16 (command -> lt NUMBER .)
    pendown         reduce using rule 16 (command -> lt NUMBER .)
    pd              reduce using rule 16 (command -> lt NUMBER .)
    penup           reduce using rule 16 (command -> lt NUMBER .)
    pu              reduce using rule 16 (command -> lt NUMBER .)
    setpencolor     reduce using rule 16 (command -> lt NUMBER .)
    make            reduce using rule 16 (command -> lt NUMBER .)
    repeat          reduce using rule 16 (command -> lt NUMBER .)
    while           reduce using rule 16 (command -> lt NUMBER .)
    $end            reduce using rule 16 (command -> lt NUMBER .)
    ]               reduce using rule 16 (command -> lt NUMBER .)


state 40

    (18) command -> lt : . VAR

    VAR             shift and go to state 60


state 41

    (19) command -> setpos [ . NUMBER NUMBER ]
    (21) command -> setpos [ . : VAR NUMBER ]
    (22) command -> setpos [ . NUMBER : VAR ]
    (23) command -> setpos [ . : VAR : VAR ]

    NUMBER          shift and go to state 61
    :               shift and go to state 62


state 42

    (20) command -> setxy NUMBER . NUMBER
    (25) command -> setxy NUMBER . : VAR

    NUMBER          shift and go to state 63
    :               shift and go to state 64


state 43

    (24) command -> setxy : . VAR NUMBER
    (26) command -> setxy : . VAR : VAR

    VAR             shift and go to state 65


state 44

    (27) command -> setx NUMBER .

    forward         reduce using rule 27 (command -> setx NUMBER .)
    fd              reduce using rule 27 (command -> setx NUMBER .)
    right           reduce using rule 27 (command -> setx NUMBER .)
    rt              reduce using rule 27 (command -> setx NUMBER .)
    back            reduce using rule 27 (command -> setx NUMBER .)
    bk              reduce using rule 27 (command -> setx NUMBER .)
    left            reduce using rule 27 (command -> setx NUMBER .)
    lt              reduce using rule 27 (command -> setx NUMBER .)
    setpos          reduce using rule 27 (command -> setx NUMBER .)
    setxy           reduce using rule 27 (command -> setx NUMBER .)
    setx            reduce using rule 27 (command -> setx NUMBER .)
    sety            reduce using rule 27 (command -> setx NUMBER .)
    home            reduce using rule 27 (command -> setx NUMBER .)
    pendown         reduce using rule 27 (command -> setx NUMBER .)
    pd              reduce using rule 27 (command -> setx NUMBER .)
    penup           reduce using rule 27 (command -> setx NUMBER .)
    pu              reduce using rule 27 (command -> setx NUMBER .)
    setpencolor     reduce using rule 27 (command -> setx NUMBER .)
    make            reduce using rule 27 (command -> setx NUMBER .)
    repeat          reduce using rule 27 (command -> setx NUMBER .)
    while           reduce using rule 27 (command -> setx NUMBER .)
    $end            reduce using rule 27 (command -> setx NUMBER .)
    ]               reduce using rule 27 (command -> setx NUMBER .)


state 45

    (28) command -> setx : . VAR

    VAR             shift and go to state 66


state 46

    (29) command -> sety NUMBER .

    forward         reduce using rule 29 (command -> sety NUMBER .)
    fd              reduce using rule 29 (command -> sety NUMBER .)
    right           reduce using rule 29 (command -> sety NUMBER .)
    rt              reduce using rule 29 (command -> sety NUMBER .)
    back            reduce using rule 29 (command -> sety NUMBER .)
    bk              reduce using rule 29 (command -> sety NUMBER .)
    left            reduce using rule 29 (command -> sety NUMBER .)
    lt              reduce using rule 29 (command -> sety NUMBER .)
    setpos          reduce using rule 29 (command -> sety NUMBER .)
    setxy           reduce using rule 29 (command -> sety NUMBER .)
    setx            reduce using rule 29 (command -> sety NUMBER .)
    sety            reduce using rule 29 (command -> sety NUMBER .)
    home            reduce using rule 29 (command -> sety NUMBER .)
    pendown         reduce using rule 29 (command -> sety NUMBER .)
    pd              reduce using rule 29 (command -> sety NUMBER .)
    penup           reduce using rule 29 (command -> sety NUMBER .)
    pu              reduce using rule 29 (command -> sety NUMBER .)
    setpencolor     reduce using rule 29 (command -> sety NUMBER .)
    make            reduce using rule 29 (command -> sety NUMBER .)
    repeat          reduce using rule 29 (command -> sety NUMBER .)
    while           reduce using rule 29 (command -> sety NUMBER .)
    $end            reduce using rule 29 (command -> sety NUMBER .)
    ]               reduce using rule 29 (command -> sety NUMBER .)


state 47

    (30) command -> sety : . VAR

    VAR             shift and go to state 67


state 48

    (36) command -> setpencolor [ . NUMBER NUMBER NUMBER ]
    (37) command -> setpencolor [ . NUMBER NUMBER : VAR ]
    (38) command -> setpencolor [ . NUMBER : VAR NUMBER ]
    (39) command -> setpencolor [ . NUMBER : VAR : VAR ]
    (40) command -> setpencolor [ . : VAR NUMBER NUMBER ]
    (41) command -> setpencolor [ . : VAR NUMBER : VAR ]
    (42) command -> setpencolor [ . : VAR : VAR NUMBER ]
    (43) command -> setpencolor [ . : VAR : VAR : VAR ]

    NUMBER          shift and go to state 68
    :               shift and go to state 69


state 49

    (44) command -> make " . VAR NUMBER
    (45) command -> make " . VAR : VAR OPERATOR NUMBER
    (46) command -> make " . VAR NUMBER OPERATOR : VAR

    VAR             shift and go to state 70


state 50

    (47) command -> repeat NUMBER . [ program ]

    [               shift and go to state 71


state 51

    (48) command -> repeat : . VAR [ program ]

    VAR             shift and go to state 72


state 52

    (49) command -> while [ . : VAR SIGN NUMBER ] [ program ]

    :               shift and go to state 73


state 53

    (5) command -> forward : VAR .

    forward         reduce using rule 5 (command -> forward : VAR .)
    fd              reduce using rule 5 (command -> forward : VAR .)
    right           reduce using rule 5 (command -> forward : VAR .)
    rt              reduce using rule 5 (command -> forward : VAR .)
    back            reduce using rule 5 (command -> forward : VAR .)
    bk              reduce using rule 5 (command -> forward : VAR .)
    left            reduce using rule 5 (command -> forward : VAR .)
    lt              reduce using rule 5 (command -> forward : VAR .)
    setpos          reduce using rule 5 (command -> forward : VAR .)
    setxy           reduce using rule 5 (command -> forward : VAR .)
    setx            reduce using rule 5 (command -> forward : VAR .)
    sety            reduce using rule 5 (command -> forward : VAR .)
    home            reduce using rule 5 (command -> forward : VAR .)
    pendown         reduce using rule 5 (command -> forward : VAR .)
    pd              reduce using rule 5 (command -> forward : VAR .)
    penup           reduce using rule 5 (command -> forward : VAR .)
    pu              reduce using rule 5 (command -> forward : VAR .)
    setpencolor     reduce using rule 5 (command -> forward : VAR .)
    make            reduce using rule 5 (command -> forward : VAR .)
    repeat          reduce using rule 5 (command -> forward : VAR .)
    while           reduce using rule 5 (command -> forward : VAR .)
    $end            reduce using rule 5 (command -> forward : VAR .)
    ]               reduce using rule 5 (command -> forward : VAR .)


state 54

    (6) command -> fd : VAR .

    forward         reduce using rule 6 (command -> fd : VAR .)
    fd              reduce using rule 6 (command -> fd : VAR .)
    right           reduce using rule 6 (command -> fd : VAR .)
    rt              reduce using rule 6 (command -> fd : VAR .)
    back            reduce using rule 6 (command -> fd : VAR .)
    bk              reduce using rule 6 (command -> fd : VAR .)
    left            reduce using rule 6 (command -> fd : VAR .)
    lt              reduce using rule 6 (command -> fd : VAR .)
    setpos          reduce using rule 6 (command -> fd : VAR .)
    setxy           reduce using rule 6 (command -> fd : VAR .)
    setx            reduce using rule 6 (command -> fd : VAR .)
    sety            reduce using rule 6 (command -> fd : VAR .)
    home            reduce using rule 6 (command -> fd : VAR .)
    pendown         reduce using rule 6 (command -> fd : VAR .)
    pd              reduce using rule 6 (command -> fd : VAR .)
    penup           reduce using rule 6 (command -> fd : VAR .)
    pu              reduce using rule 6 (command -> fd : VAR .)
    setpencolor     reduce using rule 6 (command -> fd : VAR .)
    make            reduce using rule 6 (command -> fd : VAR .)
    repeat          reduce using rule 6 (command -> fd : VAR .)
    while           reduce using rule 6 (command -> fd : VAR .)
    $end            reduce using rule 6 (command -> fd : VAR .)
    ]               reduce using rule 6 (command -> fd : VAR .)


state 55

    (9) command -> right : VAR .

    forward         reduce using rule 9 (command -> right : VAR .)
    fd              reduce using rule 9 (command -> right : VAR .)
    right           reduce using rule 9 (command -> right : VAR .)
    rt              reduce using rule 9 (command -> right : VAR .)
    back            reduce using rule 9 (command -> right : VAR .)
    bk              reduce using rule 9 (command -> right : VAR .)
    left            reduce using rule 9 (command -> right : VAR .)
    lt              reduce using rule 9 (command -> right : VAR .)
    setpos          reduce using rule 9 (command -> right : VAR .)
    setxy           reduce using rule 9 (command -> right : VAR .)
    setx            reduce using rule 9 (command -> right : VAR .)
    sety            reduce using rule 9 (command -> right : VAR .)
    home            reduce using rule 9 (command -> right : VAR .)
    pendown         reduce using rule 9 (command -> right : VAR .)
    pd              reduce using rule 9 (command -> right : VAR .)
    penup           reduce using rule 9 (command -> right : VAR .)
    pu              reduce using rule 9 (command -> right : VAR .)
    setpencolor     reduce using rule 9 (command -> right : VAR .)
    make            reduce using rule 9 (command -> right : VAR .)
    repeat          reduce using rule 9 (command -> right : VAR .)
    while           reduce using rule 9 (command -> right : VAR .)
    $end            reduce using rule 9 (command -> right : VAR .)
    ]               reduce using rule 9 (command -> right : VAR .)


state 56

    (10) command -> rt : VAR .

    forward         reduce using rule 10 (command -> rt : VAR .)
    fd              reduce using rule 10 (command -> rt : VAR .)
    right           reduce using rule 10 (command -> rt : VAR .)
    rt              reduce using rule 10 (command -> rt : VAR .)
    back            reduce using rule 10 (command -> rt : VAR .)
    bk              reduce using rule 10 (command -> rt : VAR .)
    left            reduce using rule 10 (command -> rt : VAR .)
    lt              reduce using rule 10 (command -> rt : VAR .)
    setpos          reduce using rule 10 (command -> rt : VAR .)
    setxy           reduce using rule 10 (command -> rt : VAR .)
    setx            reduce using rule 10 (command -> rt : VAR .)
    sety            reduce using rule 10 (command -> rt : VAR .)
    home            reduce using rule 10 (command -> rt : VAR .)
    pendown         reduce using rule 10 (command -> rt : VAR .)
    pd              reduce using rule 10 (command -> rt : VAR .)
    penup           reduce using rule 10 (command -> rt : VAR .)
    pu              reduce using rule 10 (command -> rt : VAR .)
    setpencolor     reduce using rule 10 (command -> rt : VAR .)
    make            reduce using rule 10 (command -> rt : VAR .)
    repeat          reduce using rule 10 (command -> rt : VAR .)
    while           reduce using rule 10 (command -> rt : VAR .)
    $end            reduce using rule 10 (command -> rt : VAR .)
    ]               reduce using rule 10 (command -> rt : VAR .)


state 57

    (13) command -> back : VAR .

    forward         reduce using rule 13 (command -> back : VAR .)
    fd              reduce using rule 13 (command -> back : VAR .)
    right           reduce using rule 13 (command -> back : VAR .)
    rt              reduce using rule 13 (command -> back : VAR .)
    back            reduce using rule 13 (command -> back : VAR .)
    bk              reduce using rule 13 (command -> back : VAR .)
    left            reduce using rule 13 (command -> back : VAR .)
    lt              reduce using rule 13 (command -> back : VAR .)
    setpos          reduce using rule 13 (command -> back : VAR .)
    setxy           reduce using rule 13 (command -> back : VAR .)
    setx            reduce using rule 13 (command -> back : VAR .)
    sety            reduce using rule 13 (command -> back : VAR .)
    home            reduce using rule 13 (command -> back : VAR .)
    pendown         reduce using rule 13 (command -> back : VAR .)
    pd              reduce using rule 13 (command -> back : VAR .)
    penup           reduce using rule 13 (command -> back : VAR .)
    pu              reduce using rule 13 (command -> back : VAR .)
    setpencolor     reduce using rule 13 (command -> back : VAR .)
    make            reduce using rule 13 (command -> back : VAR .)
    repeat          reduce using rule 13 (command -> back : VAR .)
    while           reduce using rule 13 (command -> back : VAR .)
    $end            reduce using rule 13 (command -> back : VAR .)
    ]               reduce using rule 13 (command -> back : VAR .)


state 58

    (14) command -> bk : VAR .

    forward         reduce using rule 14 (command -> bk : VAR .)
    fd              reduce using rule 14 (command -> bk : VAR .)
    right           reduce using rule 14 (command -> bk : VAR .)
    rt              reduce using rule 14 (command -> bk : VAR .)
    back            reduce using rule 14 (command -> bk : VAR .)
    bk              reduce using rule 14 (command -> bk : VAR .)
    left            reduce using rule 14 (command -> bk : VAR .)
    lt              reduce using rule 14 (command -> bk : VAR .)
    setpos          reduce using rule 14 (command -> bk : VAR .)
    setxy           reduce using rule 14 (command -> bk : VAR .)
    setx            reduce using rule 14 (command -> bk : VAR .)
    sety            reduce using rule 14 (command -> bk : VAR .)
    home            reduce using rule 14 (command -> bk : VAR .)
    pendown         reduce using rule 14 (command -> bk : VAR .)
    pd              reduce using rule 14 (command -> bk : VAR .)
    penup           reduce using rule 14 (command -> bk : VAR .)
    pu              reduce using rule 14 (command -> bk : VAR .)
    setpencolor     reduce using rule 14 (command -> bk : VAR .)
    make            reduce using rule 14 (command -> bk : VAR .)
    repeat          reduce using rule 14 (command -> bk : VAR .)
    while           reduce using rule 14 (command -> bk : VAR .)
    $end            reduce using rule 14 (command -> bk : VAR .)
    ]               reduce using rule 14 (command -> bk : VAR .)


state 59

    (17) command -> left : VAR .

    forward         reduce using rule 17 (command -> left : VAR .)
    fd              reduce using rule 17 (command -> left : VAR .)
    right           reduce using rule 17 (command -> left : VAR .)
    rt              reduce using rule 17 (command -> left : VAR .)
    back            reduce using rule 17 (command -> left : VAR .)
    bk              reduce using rule 17 (command -> left : VAR .)
    left            reduce using rule 17 (command -> left : VAR .)
    lt              reduce using rule 17 (command -> left : VAR .)
    setpos          reduce using rule 17 (command -> left : VAR .)
    setxy           reduce using rule 17 (command -> left : VAR .)
    setx            reduce using rule 17 (command -> left : VAR .)
    sety            reduce using rule 17 (command -> left : VAR .)
    home            reduce using rule 17 (command -> left : VAR .)
    pendown         reduce using rule 17 (command -> left : VAR .)
    pd              reduce using rule 17 (command -> left : VAR .)
    penup           reduce using rule 17 (command -> left : VAR .)
    pu              reduce using rule 17 (command -> left : VAR .)
    setpencolor     reduce using rule 17 (command -> left : VAR .)
    make            reduce using rule 17 (command -> left : VAR .)
    repeat          reduce using rule 17 (command -> left : VAR .)
    while           reduce using rule 17 (command -> left : VAR .)
    $end            reduce using rule 17 (command -> left : VAR .)
    ]               reduce using rule 17 (command -> left : VAR .)


state 60

    (18) command -> lt : VAR .

    forward         reduce using rule 18 (command -> lt : VAR .)
    fd              reduce using rule 18 (command -> lt : VAR .)
    right           reduce using rule 18 (command -> lt : VAR .)
    rt              reduce using rule 18 (command -> lt : VAR .)
    back            reduce using rule 18 (command -> lt : VAR .)
    bk              reduce using rule 18 (command -> lt : VAR .)
    left            reduce using rule 18 (command -> lt : VAR .)
    lt              reduce using rule 18 (command -> lt : VAR .)
    setpos          reduce using rule 18 (command -> lt : VAR .)
    setxy           reduce using rule 18 (command -> lt : VAR .)
    setx            reduce using rule 18 (command -> lt : VAR .)
    sety            reduce using rule 18 (command -> lt : VAR .)
    home            reduce using rule 18 (command -> lt : VAR .)
    pendown         reduce using rule 18 (command -> lt : VAR .)
    pd              reduce using rule 18 (command -> lt : VAR .)
    penup           reduce using rule 18 (command -> lt : VAR .)
    pu              reduce using rule 18 (command -> lt : VAR .)
    setpencolor     reduce using rule 18 (command -> lt : VAR .)
    make            reduce using rule 18 (command -> lt : VAR .)
    repeat          reduce using rule 18 (command -> lt : VAR .)
    while           reduce using rule 18 (command -> lt : VAR .)
    $end            reduce using rule 18 (command -> lt : VAR .)
    ]               reduce using rule 18 (command -> lt : VAR .)


state 61

    (19) command -> setpos [ NUMBER . NUMBER ]
    (22) command -> setpos [ NUMBER . : VAR ]

    NUMBER          shift and go to state 74
    :               shift and go to state 75


state 62

    (21) command -> setpos [ : . VAR NUMBER ]
    (23) command -> setpos [ : . VAR : VAR ]

    VAR             shift and go to state 76


state 63

    (20) command -> setxy NUMBER NUMBER .

    forward         reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    fd              reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    right           reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    rt              reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    back            reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    bk              reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    left            reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    lt              reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    setpos          reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    setxy           reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    setx            reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    sety            reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    home            reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    pendown         reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    pd              reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    penup           reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    pu              reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    setpencolor     reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    make            reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    repeat          reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    while           reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    $end            reduce using rule 20 (command -> setxy NUMBER NUMBER .)
    ]               reduce using rule 20 (command -> setxy NUMBER NUMBER .)


state 64

    (25) command -> setxy NUMBER : . VAR

    VAR             shift and go to state 77


state 65

    (24) command -> setxy : VAR . NUMBER
    (26) command -> setxy : VAR . : VAR

    NUMBER          shift and go to state 79
    :               shift and go to state 78


state 66

    (28) command -> setx : VAR .

    forward         reduce using rule 28 (command -> setx : VAR .)
    fd              reduce using rule 28 (command -> setx : VAR .)
    right           reduce using rule 28 (command -> setx : VAR .)
    rt              reduce using rule 28 (command -> setx : VAR .)
    back            reduce using rule 28 (command -> setx : VAR .)
    bk              reduce using rule 28 (command -> setx : VAR .)
    left            reduce using rule 28 (command -> setx : VAR .)
    lt              reduce using rule 28 (command -> setx : VAR .)
    setpos          reduce using rule 28 (command -> setx : VAR .)
    setxy           reduce using rule 28 (command -> setx : VAR .)
    setx            reduce using rule 28 (command -> setx : VAR .)
    sety            reduce using rule 28 (command -> setx : VAR .)
    home            reduce using rule 28 (command -> setx : VAR .)
    pendown         reduce using rule 28 (command -> setx : VAR .)
    pd              reduce using rule 28 (command -> setx : VAR .)
    penup           reduce using rule 28 (command -> setx : VAR .)
    pu              reduce using rule 28 (command -> setx : VAR .)
    setpencolor     reduce using rule 28 (command -> setx : VAR .)
    make            reduce using rule 28 (command -> setx : VAR .)
    repeat          reduce using rule 28 (command -> setx : VAR .)
    while           reduce using rule 28 (command -> setx : VAR .)
    $end            reduce using rule 28 (command -> setx : VAR .)
    ]               reduce using rule 28 (command -> setx : VAR .)


state 67

    (30) command -> sety : VAR .

    forward         reduce using rule 30 (command -> sety : VAR .)
    fd              reduce using rule 30 (command -> sety : VAR .)
    right           reduce using rule 30 (command -> sety : VAR .)
    rt              reduce using rule 30 (command -> sety : VAR .)
    back            reduce using rule 30 (command -> sety : VAR .)
    bk              reduce using rule 30 (command -> sety : VAR .)
    left            reduce using rule 30 (command -> sety : VAR .)
    lt              reduce using rule 30 (command -> sety : VAR .)
    setpos          reduce using rule 30 (command -> sety : VAR .)
    setxy           reduce using rule 30 (command -> sety : VAR .)
    setx            reduce using rule 30 (command -> sety : VAR .)
    sety            reduce using rule 30 (command -> sety : VAR .)
    home            reduce using rule 30 (command -> sety : VAR .)
    pendown         reduce using rule 30 (command -> sety : VAR .)
    pd              reduce using rule 30 (command -> sety : VAR .)
    penup           reduce using rule 30 (command -> sety : VAR .)
    pu              reduce using rule 30 (command -> sety : VAR .)
    setpencolor     reduce using rule 30 (command -> sety : VAR .)
    make            reduce using rule 30 (command -> sety : VAR .)
    repeat          reduce using rule 30 (command -> sety : VAR .)
    while           reduce using rule 30 (command -> sety : VAR .)
    $end            reduce using rule 30 (command -> sety : VAR .)
    ]               reduce using rule 30 (command -> sety : VAR .)


state 68

    (36) command -> setpencolor [ NUMBER . NUMBER NUMBER ]
    (37) command -> setpencolor [ NUMBER . NUMBER : VAR ]
    (38) command -> setpencolor [ NUMBER . : VAR NUMBER ]
    (39) command -> setpencolor [ NUMBER . : VAR : VAR ]

    NUMBER          shift and go to state 80
    :               shift and go to state 81


state 69

    (40) command -> setpencolor [ : . VAR NUMBER NUMBER ]
    (41) command -> setpencolor [ : . VAR NUMBER : VAR ]
    (42) command -> setpencolor [ : . VAR : VAR NUMBER ]
    (43) command -> setpencolor [ : . VAR : VAR : VAR ]

    VAR             shift and go to state 82


state 70

    (44) command -> make " VAR . NUMBER
    (45) command -> make " VAR . : VAR OPERATOR NUMBER
    (46) command -> make " VAR . NUMBER OPERATOR : VAR

    NUMBER          shift and go to state 83
    :               shift and go to state 84


state 71

    (47) command -> repeat NUMBER [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . forward NUMBER
    (4) command -> . fd NUMBER
    (5) command -> . forward : VAR
    (6) command -> . fd : VAR
    (7) command -> . right NUMBER
    (8) command -> . rt NUMBER
    (9) command -> . right : VAR
    (10) command -> . rt : VAR
    (11) command -> . back NUMBER
    (12) command -> . bk NUMBER
    (13) command -> . back : VAR
    (14) command -> . bk : VAR
    (15) command -> . left NUMBER
    (16) command -> . lt NUMBER
    (17) command -> . left : VAR
    (18) command -> . lt : VAR
    (19) command -> . setpos [ NUMBER NUMBER ]
    (20) command -> . setxy NUMBER NUMBER
    (21) command -> . setpos [ : VAR NUMBER ]
    (22) command -> . setpos [ NUMBER : VAR ]
    (23) command -> . setpos [ : VAR : VAR ]
    (24) command -> . setxy : VAR NUMBER
    (25) command -> . setxy NUMBER : VAR
    (26) command -> . setxy : VAR : VAR
    (27) command -> . setx NUMBER
    (28) command -> . setx : VAR
    (29) command -> . sety NUMBER
    (30) command -> . sety : VAR
    (31) command -> . home
    (32) command -> . pendown
    (33) command -> . pd
    (34) command -> . penup
    (35) command -> . pu
    (36) command -> . setpencolor [ NUMBER NUMBER NUMBER ]
    (37) command -> . setpencolor [ NUMBER NUMBER : VAR ]
    (38) command -> . setpencolor [ NUMBER : VAR NUMBER ]
    (39) command -> . setpencolor [ NUMBER : VAR : VAR ]
    (40) command -> . setpencolor [ : VAR NUMBER NUMBER ]
    (41) command -> . setpencolor [ : VAR NUMBER : VAR ]
    (42) command -> . setpencolor [ : VAR : VAR NUMBER ]
    (43) command -> . setpencolor [ : VAR : VAR : VAR ]
    (44) command -> . make " VAR NUMBER
    (45) command -> . make " VAR : VAR OPERATOR NUMBER
    (46) command -> . make " VAR NUMBER OPERATOR : VAR
    (47) command -> . repeat NUMBER [ program ]
    (48) command -> . repeat : VAR [ program ]
    (49) command -> . while [ : VAR SIGN NUMBER ] [ program ]

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23

    program                        shift and go to state 85
    command                        shift and go to state 2

state 72

    (48) command -> repeat : VAR . [ program ]

    [               shift and go to state 86


state 73

    (49) command -> while [ : . VAR SIGN NUMBER ] [ program ]

    VAR             shift and go to state 87


state 74

    (19) command -> setpos [ NUMBER NUMBER . ]

    ]               shift and go to state 88


state 75

    (22) command -> setpos [ NUMBER : . VAR ]

    VAR             shift and go to state 89


state 76

    (21) command -> setpos [ : VAR . NUMBER ]
    (23) command -> setpos [ : VAR . : VAR ]

    NUMBER          shift and go to state 91
    :               shift and go to state 90


state 77

    (25) command -> setxy NUMBER : VAR .

    forward         reduce using rule 25 (command -> setxy NUMBER : VAR .)
    fd              reduce using rule 25 (command -> setxy NUMBER : VAR .)
    right           reduce using rule 25 (command -> setxy NUMBER : VAR .)
    rt              reduce using rule 25 (command -> setxy NUMBER : VAR .)
    back            reduce using rule 25 (command -> setxy NUMBER : VAR .)
    bk              reduce using rule 25 (command -> setxy NUMBER : VAR .)
    left            reduce using rule 25 (command -> setxy NUMBER : VAR .)
    lt              reduce using rule 25 (command -> setxy NUMBER : VAR .)
    setpos          reduce using rule 25 (command -> setxy NUMBER : VAR .)
    setxy           reduce using rule 25 (command -> setxy NUMBER : VAR .)
    setx            reduce using rule 25 (command -> setxy NUMBER : VAR .)
    sety            reduce using rule 25 (command -> setxy NUMBER : VAR .)
    home            reduce using rule 25 (command -> setxy NUMBER : VAR .)
    pendown         reduce using rule 25 (command -> setxy NUMBER : VAR .)
    pd              reduce using rule 25 (command -> setxy NUMBER : VAR .)
    penup           reduce using rule 25 (command -> setxy NUMBER : VAR .)
    pu              reduce using rule 25 (command -> setxy NUMBER : VAR .)
    setpencolor     reduce using rule 25 (command -> setxy NUMBER : VAR .)
    make            reduce using rule 25 (command -> setxy NUMBER : VAR .)
    repeat          reduce using rule 25 (command -> setxy NUMBER : VAR .)
    while           reduce using rule 25 (command -> setxy NUMBER : VAR .)
    $end            reduce using rule 25 (command -> setxy NUMBER : VAR .)
    ]               reduce using rule 25 (command -> setxy NUMBER : VAR .)


state 78

    (26) command -> setxy : VAR : . VAR

    VAR             shift and go to state 92


state 79

    (24) command -> setxy : VAR NUMBER .

    forward         reduce using rule 24 (command -> setxy : VAR NUMBER .)
    fd              reduce using rule 24 (command -> setxy : VAR NUMBER .)
    right           reduce using rule 24 (command -> setxy : VAR NUMBER .)
    rt              reduce using rule 24 (command -> setxy : VAR NUMBER .)
    back            reduce using rule 24 (command -> setxy : VAR NUMBER .)
    bk              reduce using rule 24 (command -> setxy : VAR NUMBER .)
    left            reduce using rule 24 (command -> setxy : VAR NUMBER .)
    lt              reduce using rule 24 (command -> setxy : VAR NUMBER .)
    setpos          reduce using rule 24 (command -> setxy : VAR NUMBER .)
    setxy           reduce using rule 24 (command -> setxy : VAR NUMBER .)
    setx            reduce using rule 24 (command -> setxy : VAR NUMBER .)
    sety            reduce using rule 24 (command -> setxy : VAR NUMBER .)
    home            reduce using rule 24 (command -> setxy : VAR NUMBER .)
    pendown         reduce using rule 24 (command -> setxy : VAR NUMBER .)
    pd              reduce using rule 24 (command -> setxy : VAR NUMBER .)
    penup           reduce using rule 24 (command -> setxy : VAR NUMBER .)
    pu              reduce using rule 24 (command -> setxy : VAR NUMBER .)
    setpencolor     reduce using rule 24 (command -> setxy : VAR NUMBER .)
    make            reduce using rule 24 (command -> setxy : VAR NUMBER .)
    repeat          reduce using rule 24 (command -> setxy : VAR NUMBER .)
    while           reduce using rule 24 (command -> setxy : VAR NUMBER .)
    $end            reduce using rule 24 (command -> setxy : VAR NUMBER .)
    ]               reduce using rule 24 (command -> setxy : VAR NUMBER .)


state 80

    (36) command -> setpencolor [ NUMBER NUMBER . NUMBER ]
    (37) command -> setpencolor [ NUMBER NUMBER . : VAR ]

    NUMBER          shift and go to state 93
    :               shift and go to state 94


state 81

    (38) command -> setpencolor [ NUMBER : . VAR NUMBER ]
    (39) command -> setpencolor [ NUMBER : . VAR : VAR ]

    VAR             shift and go to state 95


state 82

    (40) command -> setpencolor [ : VAR . NUMBER NUMBER ]
    (41) command -> setpencolor [ : VAR . NUMBER : VAR ]
    (42) command -> setpencolor [ : VAR . : VAR NUMBER ]
    (43) command -> setpencolor [ : VAR . : VAR : VAR ]

    NUMBER          shift and go to state 97
    :               shift and go to state 96


state 83

    (44) command -> make " VAR NUMBER .
    (46) command -> make " VAR NUMBER . OPERATOR : VAR

    forward         reduce using rule 44 (command -> make " VAR NUMBER .)
    fd              reduce using rule 44 (command -> make " VAR NUMBER .)
    right           reduce using rule 44 (command -> make " VAR NUMBER .)
    rt              reduce using rule 44 (command -> make " VAR NUMBER .)
    back            reduce using rule 44 (command -> make " VAR NUMBER .)
    bk              reduce using rule 44 (command -> make " VAR NUMBER .)
    left            reduce using rule 44 (command -> make " VAR NUMBER .)
    lt              reduce using rule 44 (command -> make " VAR NUMBER .)
    setpos          reduce using rule 44 (command -> make " VAR NUMBER .)
    setxy           reduce using rule 44 (command -> make " VAR NUMBER .)
    setx            reduce using rule 44 (command -> make " VAR NUMBER .)
    sety            reduce using rule 44 (command -> make " VAR NUMBER .)
    home            reduce using rule 44 (command -> make " VAR NUMBER .)
    pendown         reduce using rule 44 (command -> make " VAR NUMBER .)
    pd              reduce using rule 44 (command -> make " VAR NUMBER .)
    penup           reduce using rule 44 (command -> make " VAR NUMBER .)
    pu              reduce using rule 44 (command -> make " VAR NUMBER .)
    setpencolor     reduce using rule 44 (command -> make " VAR NUMBER .)
    make            reduce using rule 44 (command -> make " VAR NUMBER .)
    repeat          reduce using rule 44 (command -> make " VAR NUMBER .)
    while           reduce using rule 44 (command -> make " VAR NUMBER .)
    $end            reduce using rule 44 (command -> make " VAR NUMBER .)
    ]               reduce using rule 44 (command -> make " VAR NUMBER .)
    OPERATOR        shift and go to state 98


state 84

    (45) command -> make " VAR : . VAR OPERATOR NUMBER

    VAR             shift and go to state 99


state 85

    (47) command -> repeat NUMBER [ program . ]
    (2) program -> program . command
    (3) command -> . forward NUMBER
    (4) command -> . fd NUMBER
    (5) command -> . forward : VAR
    (6) command -> . fd : VAR
    (7) command -> . right NUMBER
    (8) command -> . rt NUMBER
    (9) command -> . right : VAR
    (10) command -> . rt : VAR
    (11) command -> . back NUMBER
    (12) command -> . bk NUMBER
    (13) command -> . back : VAR
    (14) command -> . bk : VAR
    (15) command -> . left NUMBER
    (16) command -> . lt NUMBER
    (17) command -> . left : VAR
    (18) command -> . lt : VAR
    (19) command -> . setpos [ NUMBER NUMBER ]
    (20) command -> . setxy NUMBER NUMBER
    (21) command -> . setpos [ : VAR NUMBER ]
    (22) command -> . setpos [ NUMBER : VAR ]
    (23) command -> . setpos [ : VAR : VAR ]
    (24) command -> . setxy : VAR NUMBER
    (25) command -> . setxy NUMBER : VAR
    (26) command -> . setxy : VAR : VAR
    (27) command -> . setx NUMBER
    (28) command -> . setx : VAR
    (29) command -> . sety NUMBER
    (30) command -> . sety : VAR
    (31) command -> . home
    (32) command -> . pendown
    (33) command -> . pd
    (34) command -> . penup
    (35) command -> . pu
    (36) command -> . setpencolor [ NUMBER NUMBER NUMBER ]
    (37) command -> . setpencolor [ NUMBER NUMBER : VAR ]
    (38) command -> . setpencolor [ NUMBER : VAR NUMBER ]
    (39) command -> . setpencolor [ NUMBER : VAR : VAR ]
    (40) command -> . setpencolor [ : VAR NUMBER NUMBER ]
    (41) command -> . setpencolor [ : VAR NUMBER : VAR ]
    (42) command -> . setpencolor [ : VAR : VAR NUMBER ]
    (43) command -> . setpencolor [ : VAR : VAR : VAR ]
    (44) command -> . make " VAR NUMBER
    (45) command -> . make " VAR : VAR OPERATOR NUMBER
    (46) command -> . make " VAR NUMBER OPERATOR : VAR
    (47) command -> . repeat NUMBER [ program ]
    (48) command -> . repeat : VAR [ program ]
    (49) command -> . while [ : VAR SIGN NUMBER ] [ program ]

    ]               shift and go to state 100
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23

    command                        shift and go to state 24

state 86

    (48) command -> repeat : VAR [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . forward NUMBER
    (4) command -> . fd NUMBER
    (5) command -> . forward : VAR
    (6) command -> . fd : VAR
    (7) command -> . right NUMBER
    (8) command -> . rt NUMBER
    (9) command -> . right : VAR
    (10) command -> . rt : VAR
    (11) command -> . back NUMBER
    (12) command -> . bk NUMBER
    (13) command -> . back : VAR
    (14) command -> . bk : VAR
    (15) command -> . left NUMBER
    (16) command -> . lt NUMBER
    (17) command -> . left : VAR
    (18) command -> . lt : VAR
    (19) command -> . setpos [ NUMBER NUMBER ]
    (20) command -> . setxy NUMBER NUMBER
    (21) command -> . setpos [ : VAR NUMBER ]
    (22) command -> . setpos [ NUMBER : VAR ]
    (23) command -> . setpos [ : VAR : VAR ]
    (24) command -> . setxy : VAR NUMBER
    (25) command -> . setxy NUMBER : VAR
    (26) command -> . setxy : VAR : VAR
    (27) command -> . setx NUMBER
    (28) command -> . setx : VAR
    (29) command -> . sety NUMBER
    (30) command -> . sety : VAR
    (31) command -> . home
    (32) command -> . pendown
    (33) command -> . pd
    (34) command -> . penup
    (35) command -> . pu
    (36) command -> . setpencolor [ NUMBER NUMBER NUMBER ]
    (37) command -> . setpencolor [ NUMBER NUMBER : VAR ]
    (38) command -> . setpencolor [ NUMBER : VAR NUMBER ]
    (39) command -> . setpencolor [ NUMBER : VAR : VAR ]
    (40) command -> . setpencolor [ : VAR NUMBER NUMBER ]
    (41) command -> . setpencolor [ : VAR NUMBER : VAR ]
    (42) command -> . setpencolor [ : VAR : VAR NUMBER ]
    (43) command -> . setpencolor [ : VAR : VAR : VAR ]
    (44) command -> . make " VAR NUMBER
    (45) command -> . make " VAR : VAR OPERATOR NUMBER
    (46) command -> . make " VAR NUMBER OPERATOR : VAR
    (47) command -> . repeat NUMBER [ program ]
    (48) command -> . repeat : VAR [ program ]
    (49) command -> . while [ : VAR SIGN NUMBER ] [ program ]

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23

    program                        shift and go to state 101
    command                        shift and go to state 2

state 87

    (49) command -> while [ : VAR . SIGN NUMBER ] [ program ]

    SIGN            shift and go to state 102


state 88

    (19) command -> setpos [ NUMBER NUMBER ] .

    forward         reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    fd              reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    right           reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    rt              reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    back            reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    bk              reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    left            reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    lt              reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    setpos          reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    setxy           reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    setx            reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    sety            reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    home            reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    pendown         reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    pd              reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    penup           reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    pu              reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    setpencolor     reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    make            reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    repeat          reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    while           reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    $end            reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)
    ]               reduce using rule 19 (command -> setpos [ NUMBER NUMBER ] .)


state 89

    (22) command -> setpos [ NUMBER : VAR . ]

    ]               shift and go to state 103


state 90

    (23) command -> setpos [ : VAR : . VAR ]

    VAR             shift and go to state 104


state 91

    (21) command -> setpos [ : VAR NUMBER . ]

    ]               shift and go to state 105


state 92

    (26) command -> setxy : VAR : VAR .

    forward         reduce using rule 26 (command -> setxy : VAR : VAR .)
    fd              reduce using rule 26 (command -> setxy : VAR : VAR .)
    right           reduce using rule 26 (command -> setxy : VAR : VAR .)
    rt              reduce using rule 26 (command -> setxy : VAR : VAR .)
    back            reduce using rule 26 (command -> setxy : VAR : VAR .)
    bk              reduce using rule 26 (command -> setxy : VAR : VAR .)
    left            reduce using rule 26 (command -> setxy : VAR : VAR .)
    lt              reduce using rule 26 (command -> setxy : VAR : VAR .)
    setpos          reduce using rule 26 (command -> setxy : VAR : VAR .)
    setxy           reduce using rule 26 (command -> setxy : VAR : VAR .)
    setx            reduce using rule 26 (command -> setxy : VAR : VAR .)
    sety            reduce using rule 26 (command -> setxy : VAR : VAR .)
    home            reduce using rule 26 (command -> setxy : VAR : VAR .)
    pendown         reduce using rule 26 (command -> setxy : VAR : VAR .)
    pd              reduce using rule 26 (command -> setxy : VAR : VAR .)
    penup           reduce using rule 26 (command -> setxy : VAR : VAR .)
    pu              reduce using rule 26 (command -> setxy : VAR : VAR .)
    setpencolor     reduce using rule 26 (command -> setxy : VAR : VAR .)
    make            reduce using rule 26 (command -> setxy : VAR : VAR .)
    repeat          reduce using rule 26 (command -> setxy : VAR : VAR .)
    while           reduce using rule 26 (command -> setxy : VAR : VAR .)
    $end            reduce using rule 26 (command -> setxy : VAR : VAR .)
    ]               reduce using rule 26 (command -> setxy : VAR : VAR .)


state 93

    (36) command -> setpencolor [ NUMBER NUMBER NUMBER . ]

    ]               shift and go to state 106


state 94

    (37) command -> setpencolor [ NUMBER NUMBER : . VAR ]

    VAR             shift and go to state 107


state 95

    (38) command -> setpencolor [ NUMBER : VAR . NUMBER ]
    (39) command -> setpencolor [ NUMBER : VAR . : VAR ]

    NUMBER          shift and go to state 108
    :               shift and go to state 109


state 96

    (42) command -> setpencolor [ : VAR : . VAR NUMBER ]
    (43) command -> setpencolor [ : VAR : . VAR : VAR ]

    VAR             shift and go to state 110


state 97

    (40) command -> setpencolor [ : VAR NUMBER . NUMBER ]
    (41) command -> setpencolor [ : VAR NUMBER . : VAR ]

    NUMBER          shift and go to state 112
    :               shift and go to state 111


state 98

    (46) command -> make " VAR NUMBER OPERATOR . : VAR

    :               shift and go to state 113


state 99

    (45) command -> make " VAR : VAR . OPERATOR NUMBER

    OPERATOR        shift and go to state 114


state 100

    (47) command -> repeat NUMBER [ program ] .

    forward         reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    fd              reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    right           reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    rt              reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    back            reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    bk              reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    left            reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    lt              reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    setpos          reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    setxy           reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    setx            reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    sety            reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    home            reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    pendown         reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    pd              reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    penup           reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    pu              reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    setpencolor     reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    make            reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    repeat          reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    while           reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    $end            reduce using rule 47 (command -> repeat NUMBER [ program ] .)
    ]               reduce using rule 47 (command -> repeat NUMBER [ program ] .)


state 101

    (48) command -> repeat : VAR [ program . ]
    (2) program -> program . command
    (3) command -> . forward NUMBER
    (4) command -> . fd NUMBER
    (5) command -> . forward : VAR
    (6) command -> . fd : VAR
    (7) command -> . right NUMBER
    (8) command -> . rt NUMBER
    (9) command -> . right : VAR
    (10) command -> . rt : VAR
    (11) command -> . back NUMBER
    (12) command -> . bk NUMBER
    (13) command -> . back : VAR
    (14) command -> . bk : VAR
    (15) command -> . left NUMBER
    (16) command -> . lt NUMBER
    (17) command -> . left : VAR
    (18) command -> . lt : VAR
    (19) command -> . setpos [ NUMBER NUMBER ]
    (20) command -> . setxy NUMBER NUMBER
    (21) command -> . setpos [ : VAR NUMBER ]
    (22) command -> . setpos [ NUMBER : VAR ]
    (23) command -> . setpos [ : VAR : VAR ]
    (24) command -> . setxy : VAR NUMBER
    (25) command -> . setxy NUMBER : VAR
    (26) command -> . setxy : VAR : VAR
    (27) command -> . setx NUMBER
    (28) command -> . setx : VAR
    (29) command -> . sety NUMBER
    (30) command -> . sety : VAR
    (31) command -> . home
    (32) command -> . pendown
    (33) command -> . pd
    (34) command -> . penup
    (35) command -> . pu
    (36) command -> . setpencolor [ NUMBER NUMBER NUMBER ]
    (37) command -> . setpencolor [ NUMBER NUMBER : VAR ]
    (38) command -> . setpencolor [ NUMBER : VAR NUMBER ]
    (39) command -> . setpencolor [ NUMBER : VAR : VAR ]
    (40) command -> . setpencolor [ : VAR NUMBER NUMBER ]
    (41) command -> . setpencolor [ : VAR NUMBER : VAR ]
    (42) command -> . setpencolor [ : VAR : VAR NUMBER ]
    (43) command -> . setpencolor [ : VAR : VAR : VAR ]
    (44) command -> . make " VAR NUMBER
    (45) command -> . make " VAR : VAR OPERATOR NUMBER
    (46) command -> . make " VAR NUMBER OPERATOR : VAR
    (47) command -> . repeat NUMBER [ program ]
    (48) command -> . repeat : VAR [ program ]
    (49) command -> . while [ : VAR SIGN NUMBER ] [ program ]

    ]               shift and go to state 115
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23

    command                        shift and go to state 24

state 102

    (49) command -> while [ : VAR SIGN . NUMBER ] [ program ]

    NUMBER          shift and go to state 116


state 103

    (22) command -> setpos [ NUMBER : VAR ] .

    forward         reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    fd              reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    right           reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    rt              reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    back            reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    bk              reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    left            reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    lt              reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    setpos          reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    setxy           reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    setx            reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    sety            reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    home            reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    pendown         reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    pd              reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    penup           reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    pu              reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    setpencolor     reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    make            reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    repeat          reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    while           reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    $end            reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)
    ]               reduce using rule 22 (command -> setpos [ NUMBER : VAR ] .)


state 104

    (23) command -> setpos [ : VAR : VAR . ]

    ]               shift and go to state 117


state 105

    (21) command -> setpos [ : VAR NUMBER ] .

    forward         reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    fd              reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    right           reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    rt              reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    back            reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    bk              reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    left            reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    lt              reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    setpos          reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    setxy           reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    setx            reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    sety            reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    home            reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    pendown         reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    pd              reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    penup           reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    pu              reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    setpencolor     reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    make            reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    repeat          reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    while           reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    $end            reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)
    ]               reduce using rule 21 (command -> setpos [ : VAR NUMBER ] .)


state 106

    (36) command -> setpencolor [ NUMBER NUMBER NUMBER ] .

    forward         reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    fd              reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    right           reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    rt              reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    back            reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    bk              reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    left            reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    lt              reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    setpos          reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    setxy           reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    setx            reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    sety            reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    home            reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    pendown         reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    pd              reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    penup           reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    pu              reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    setpencolor     reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    make            reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    repeat          reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    while           reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    $end            reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)
    ]               reduce using rule 36 (command -> setpencolor [ NUMBER NUMBER NUMBER ] .)


state 107

    (37) command -> setpencolor [ NUMBER NUMBER : VAR . ]

    ]               shift and go to state 118


state 108

    (38) command -> setpencolor [ NUMBER : VAR NUMBER . ]

    ]               shift and go to state 119


state 109

    (39) command -> setpencolor [ NUMBER : VAR : . VAR ]

    VAR             shift and go to state 120


state 110

    (42) command -> setpencolor [ : VAR : VAR . NUMBER ]
    (43) command -> setpencolor [ : VAR : VAR . : VAR ]

    NUMBER          shift and go to state 122
    :               shift and go to state 121


state 111

    (41) command -> setpencolor [ : VAR NUMBER : . VAR ]

    VAR             shift and go to state 123


state 112

    (40) command -> setpencolor [ : VAR NUMBER NUMBER . ]

    ]               shift and go to state 124


state 113

    (46) command -> make " VAR NUMBER OPERATOR : . VAR

    VAR             shift and go to state 125


state 114

    (45) command -> make " VAR : VAR OPERATOR . NUMBER

    NUMBER          shift and go to state 126


state 115

    (48) command -> repeat : VAR [ program ] .

    forward         reduce using rule 48 (command -> repeat : VAR [ program ] .)
    fd              reduce using rule 48 (command -> repeat : VAR [ program ] .)
    right           reduce using rule 48 (command -> repeat : VAR [ program ] .)
    rt              reduce using rule 48 (command -> repeat : VAR [ program ] .)
    back            reduce using rule 48 (command -> repeat : VAR [ program ] .)
    bk              reduce using rule 48 (command -> repeat : VAR [ program ] .)
    left            reduce using rule 48 (command -> repeat : VAR [ program ] .)
    lt              reduce using rule 48 (command -> repeat : VAR [ program ] .)
    setpos          reduce using rule 48 (command -> repeat : VAR [ program ] .)
    setxy           reduce using rule 48 (command -> repeat : VAR [ program ] .)
    setx            reduce using rule 48 (command -> repeat : VAR [ program ] .)
    sety            reduce using rule 48 (command -> repeat : VAR [ program ] .)
    home            reduce using rule 48 (command -> repeat : VAR [ program ] .)
    pendown         reduce using rule 48 (command -> repeat : VAR [ program ] .)
    pd              reduce using rule 48 (command -> repeat : VAR [ program ] .)
    penup           reduce using rule 48 (command -> repeat : VAR [ program ] .)
    pu              reduce using rule 48 (command -> repeat : VAR [ program ] .)
    setpencolor     reduce using rule 48 (command -> repeat : VAR [ program ] .)
    make            reduce using rule 48 (command -> repeat : VAR [ program ] .)
    repeat          reduce using rule 48 (command -> repeat : VAR [ program ] .)
    while           reduce using rule 48 (command -> repeat : VAR [ program ] .)
    $end            reduce using rule 48 (command -> repeat : VAR [ program ] .)
    ]               reduce using rule 48 (command -> repeat : VAR [ program ] .)


state 116

    (49) command -> while [ : VAR SIGN NUMBER . ] [ program ]

    ]               shift and go to state 127


state 117

    (23) command -> setpos [ : VAR : VAR ] .

    forward         reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    fd              reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    right           reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    rt              reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    back            reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    bk              reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    left            reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    lt              reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    setpos          reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    setxy           reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    setx            reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    sety            reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    home            reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    pendown         reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    pd              reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    penup           reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    pu              reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    setpencolor     reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    make            reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    repeat          reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    while           reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    $end            reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)
    ]               reduce using rule 23 (command -> setpos [ : VAR : VAR ] .)


state 118

    (37) command -> setpencolor [ NUMBER NUMBER : VAR ] .

    forward         reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    fd              reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    right           reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    rt              reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    back            reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    bk              reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    left            reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    lt              reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    setpos          reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    setxy           reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    setx            reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    sety            reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    home            reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    pendown         reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    pd              reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    penup           reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    pu              reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    setpencolor     reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    make            reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    repeat          reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    while           reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    $end            reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)
    ]               reduce using rule 37 (command -> setpencolor [ NUMBER NUMBER : VAR ] .)


state 119

    (38) command -> setpencolor [ NUMBER : VAR NUMBER ] .

    forward         reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    fd              reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    right           reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    rt              reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    back            reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    bk              reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    left            reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    lt              reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    setpos          reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    setxy           reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    setx            reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    sety            reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    home            reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    pendown         reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    pd              reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    penup           reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    pu              reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    setpencolor     reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    make            reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    repeat          reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    while           reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    $end            reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)
    ]               reduce using rule 38 (command -> setpencolor [ NUMBER : VAR NUMBER ] .)


state 120

    (39) command -> setpencolor [ NUMBER : VAR : VAR . ]

    ]               shift and go to state 128


state 121

    (43) command -> setpencolor [ : VAR : VAR : . VAR ]

    VAR             shift and go to state 129


state 122

    (42) command -> setpencolor [ : VAR : VAR NUMBER . ]

    ]               shift and go to state 130


state 123

    (41) command -> setpencolor [ : VAR NUMBER : VAR . ]

    ]               shift and go to state 131


state 124

    (40) command -> setpencolor [ : VAR NUMBER NUMBER ] .

    forward         reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    fd              reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    right           reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    rt              reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    back            reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    bk              reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    left            reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    lt              reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    setpos          reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    setxy           reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    setx            reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    sety            reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    home            reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    pendown         reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    pd              reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    penup           reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    pu              reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    setpencolor     reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    make            reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    repeat          reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    while           reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    $end            reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)
    ]               reduce using rule 40 (command -> setpencolor [ : VAR NUMBER NUMBER ] .)


state 125

    (46) command -> make " VAR NUMBER OPERATOR : VAR .

    forward         reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    fd              reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    right           reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    rt              reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    back            reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    bk              reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    left            reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    lt              reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    setpos          reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    setxy           reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    setx            reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    sety            reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    home            reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    pendown         reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    pd              reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    penup           reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    pu              reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    setpencolor     reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    make            reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    repeat          reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    while           reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    $end            reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)
    ]               reduce using rule 46 (command -> make " VAR NUMBER OPERATOR : VAR .)


state 126

    (45) command -> make " VAR : VAR OPERATOR NUMBER .

    forward         reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    fd              reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    right           reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    rt              reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    back            reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    bk              reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    left            reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    lt              reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    setpos          reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    setxy           reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    setx            reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    sety            reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    home            reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    pendown         reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    pd              reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    penup           reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    pu              reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    setpencolor     reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    make            reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    repeat          reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    while           reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    $end            reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)
    ]               reduce using rule 45 (command -> make " VAR : VAR OPERATOR NUMBER .)


state 127

    (49) command -> while [ : VAR SIGN NUMBER ] . [ program ]

    [               shift and go to state 132


state 128

    (39) command -> setpencolor [ NUMBER : VAR : VAR ] .

    forward         reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    fd              reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    right           reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    rt              reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    back            reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    bk              reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    left            reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    lt              reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    setpos          reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    setxy           reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    setx            reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    sety            reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    home            reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    pendown         reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    pd              reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    penup           reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    pu              reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    setpencolor     reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    make            reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    repeat          reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    while           reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    $end            reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)
    ]               reduce using rule 39 (command -> setpencolor [ NUMBER : VAR : VAR ] .)


state 129

    (43) command -> setpencolor [ : VAR : VAR : VAR . ]

    ]               shift and go to state 133


state 130

    (42) command -> setpencolor [ : VAR : VAR NUMBER ] .

    forward         reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    fd              reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    right           reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    rt              reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    back            reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    bk              reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    left            reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    lt              reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    setpos          reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    setxy           reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    setx            reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    sety            reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    home            reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    pendown         reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    pd              reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    penup           reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    pu              reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    setpencolor     reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    make            reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    repeat          reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    while           reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    $end            reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)
    ]               reduce using rule 42 (command -> setpencolor [ : VAR : VAR NUMBER ] .)


state 131

    (41) command -> setpencolor [ : VAR NUMBER : VAR ] .

    forward         reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    fd              reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    right           reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    rt              reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    back            reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    bk              reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    left            reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    lt              reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    setpos          reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    setxy           reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    setx            reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    sety            reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    home            reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    pendown         reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    pd              reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    penup           reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    pu              reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    setpencolor     reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    make            reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    repeat          reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    while           reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    $end            reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)
    ]               reduce using rule 41 (command -> setpencolor [ : VAR NUMBER : VAR ] .)


state 132

    (49) command -> while [ : VAR SIGN NUMBER ] [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . forward NUMBER
    (4) command -> . fd NUMBER
    (5) command -> . forward : VAR
    (6) command -> . fd : VAR
    (7) command -> . right NUMBER
    (8) command -> . rt NUMBER
    (9) command -> . right : VAR
    (10) command -> . rt : VAR
    (11) command -> . back NUMBER
    (12) command -> . bk NUMBER
    (13) command -> . back : VAR
    (14) command -> . bk : VAR
    (15) command -> . left NUMBER
    (16) command -> . lt NUMBER
    (17) command -> . left : VAR
    (18) command -> . lt : VAR
    (19) command -> . setpos [ NUMBER NUMBER ]
    (20) command -> . setxy NUMBER NUMBER
    (21) command -> . setpos [ : VAR NUMBER ]
    (22) command -> . setpos [ NUMBER : VAR ]
    (23) command -> . setpos [ : VAR : VAR ]
    (24) command -> . setxy : VAR NUMBER
    (25) command -> . setxy NUMBER : VAR
    (26) command -> . setxy : VAR : VAR
    (27) command -> . setx NUMBER
    (28) command -> . setx : VAR
    (29) command -> . sety NUMBER
    (30) command -> . sety : VAR
    (31) command -> . home
    (32) command -> . pendown
    (33) command -> . pd
    (34) command -> . penup
    (35) command -> . pu
    (36) command -> . setpencolor [ NUMBER NUMBER NUMBER ]
    (37) command -> . setpencolor [ NUMBER NUMBER : VAR ]
    (38) command -> . setpencolor [ NUMBER : VAR NUMBER ]
    (39) command -> . setpencolor [ NUMBER : VAR : VAR ]
    (40) command -> . setpencolor [ : VAR NUMBER NUMBER ]
    (41) command -> . setpencolor [ : VAR NUMBER : VAR ]
    (42) command -> . setpencolor [ : VAR : VAR NUMBER ]
    (43) command -> . setpencolor [ : VAR : VAR : VAR ]
    (44) command -> . make " VAR NUMBER
    (45) command -> . make " VAR : VAR OPERATOR NUMBER
    (46) command -> . make " VAR NUMBER OPERATOR : VAR
    (47) command -> . repeat NUMBER [ program ]
    (48) command -> . repeat : VAR [ program ]
    (49) command -> . while [ : VAR SIGN NUMBER ] [ program ]

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23

    program                        shift and go to state 134
    command                        shift and go to state 2

state 133

    (43) command -> setpencolor [ : VAR : VAR : VAR ] .

    forward         reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    fd              reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    right           reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    rt              reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    back            reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    bk              reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    left            reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    lt              reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    setpos          reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    setxy           reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    setx            reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    sety            reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    home            reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    pendown         reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    pd              reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    penup           reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    pu              reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    setpencolor     reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    make            reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    repeat          reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    while           reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    $end            reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)
    ]               reduce using rule 43 (command -> setpencolor [ : VAR : VAR : VAR ] .)


state 134

    (49) command -> while [ : VAR SIGN NUMBER ] [ program . ]
    (2) program -> program . command
    (3) command -> . forward NUMBER
    (4) command -> . fd NUMBER
    (5) command -> . forward : VAR
    (6) command -> . fd : VAR
    (7) command -> . right NUMBER
    (8) command -> . rt NUMBER
    (9) command -> . right : VAR
    (10) command -> . rt : VAR
    (11) command -> . back NUMBER
    (12) command -> . bk NUMBER
    (13) command -> . back : VAR
    (14) command -> . bk : VAR
    (15) command -> . left NUMBER
    (16) command -> . lt NUMBER
    (17) command -> . left : VAR
    (18) command -> . lt : VAR
    (19) command -> . setpos [ NUMBER NUMBER ]
    (20) command -> . setxy NUMBER NUMBER
    (21) command -> . setpos [ : VAR NUMBER ]
    (22) command -> . setpos [ NUMBER : VAR ]
    (23) command -> . setpos [ : VAR : VAR ]
    (24) command -> . setxy : VAR NUMBER
    (25) command -> . setxy NUMBER : VAR
    (26) command -> . setxy : VAR : VAR
    (27) command -> . setx NUMBER
    (28) command -> . setx : VAR
    (29) command -> . sety NUMBER
    (30) command -> . sety : VAR
    (31) command -> . home
    (32) command -> . pendown
    (33) command -> . pd
    (34) command -> . penup
    (35) command -> . pu
    (36) command -> . setpencolor [ NUMBER NUMBER NUMBER ]
    (37) command -> . setpencolor [ NUMBER NUMBER : VAR ]
    (38) command -> . setpencolor [ NUMBER : VAR NUMBER ]
    (39) command -> . setpencolor [ NUMBER : VAR : VAR ]
    (40) command -> . setpencolor [ : VAR NUMBER NUMBER ]
    (41) command -> . setpencolor [ : VAR NUMBER : VAR ]
    (42) command -> . setpencolor [ : VAR : VAR NUMBER ]
    (43) command -> . setpencolor [ : VAR : VAR : VAR ]
    (44) command -> . make " VAR NUMBER
    (45) command -> . make " VAR : VAR OPERATOR NUMBER
    (46) command -> . make " VAR NUMBER OPERATOR : VAR
    (47) command -> . repeat NUMBER [ program ]
    (48) command -> . repeat : VAR [ program ]
    (49) command -> . while [ : VAR SIGN NUMBER ] [ program ]

    ]               shift and go to state 135
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23

    command                        shift and go to state 24

state 135

    (49) command -> while [ : VAR SIGN NUMBER ] [ program ] .

    forward         reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    fd              reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    right           reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    rt              reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    back            reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    bk              reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    left            reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    lt              reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    setpos          reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    setxy           reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    setx            reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    sety            reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    home            reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    pendown         reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    pd              reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    penup           reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    pu              reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    setpencolor     reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    make            reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    repeat          reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    while           reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    $end            reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)
    ]               reduce using rule 49 (command -> while [ : VAR SIGN NUMBER ] [ program ] .)

