Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> command
Rule 2     program -> program command
Rule 3     command -> forward INT
Rule 4     command -> fd INT
Rule 5     length -> INT

Terminals, with rules where they appear

INT                  : 3 4 5
error                : 
fd                   : 4
forward              : 3

Nonterminals, with rules where they appear

command              : 1 2
length               : 
program              : 2 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . forward INT
    (4) command -> . fd INT

    forward         shift and go to state 3
    fd              shift and go to state 4

    program                        shift and go to state 1
    command                        shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . command
    (3) command -> . forward INT
    (4) command -> . fd INT

    forward         shift and go to state 3
    fd              shift and go to state 4

    command                        shift and go to state 5

state 2

    (1) program -> command .

    forward         reduce using rule 1 (program -> command .)
    fd              reduce using rule 1 (program -> command .)
    $end            reduce using rule 1 (program -> command .)


state 3

    (3) command -> forward . INT

    INT             shift and go to state 6


state 4

    (4) command -> fd . INT

    INT             shift and go to state 7


state 5

    (2) program -> program command .

    forward         reduce using rule 2 (program -> program command .)
    fd              reduce using rule 2 (program -> program command .)
    $end            reduce using rule 2 (program -> program command .)


state 6

    (3) command -> forward INT .

    forward         reduce using rule 3 (command -> forward INT .)
    fd              reduce using rule 3 (command -> forward INT .)
    $end            reduce using rule 3 (command -> forward INT .)


state 7

    (4) command -> fd INT .

    forward         reduce using rule 4 (command -> fd INT .)
    fd              reduce using rule 4 (command -> fd INT .)
    $end            reduce using rule 4 (command -> fd INT .)

