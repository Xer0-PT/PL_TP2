Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> command
Rule 2     program -> program command
Rule 3     value -> NUMBER
Rule 4     value -> " VAR
Rule 5     value -> : VAR
Rule 6     command -> forward value
Rule 7     command -> fd value
Rule 8     command -> right value
Rule 9     command -> rt value
Rule 10    command -> back value
Rule 11    command -> bk value
Rule 12    command -> left value
Rule 13    command -> lt value
Rule 14    command -> setpos [ value value ]
Rule 15    command -> setxy value value
Rule 16    command -> setx value
Rule 17    command -> sety value
Rule 18    command -> home
Rule 19    command -> pendown
Rule 20    command -> pd
Rule 21    command -> penup
Rule 22    command -> pu
Rule 23    command -> setpencolor [ value value value ]
Rule 24    command -> make value value
Rule 25    command -> make value value OPERATOR value
Rule 26    command -> repeat value [ program ]
Rule 27    command -> while [ value SIGN value ] [ program ]
Rule 28    command -> if value SIGN value [ program ]
Rule 29    command -> ifelse value SIGN value [ program ] [ program ]
Rule 30    varlist -> <empty>
Rule 31    varlist -> value
Rule 32    varlist -> varlist value
Rule 33    command -> TO STR varlist program END
Rule 34    valuelist -> <empty>
Rule 35    valuelist -> value
Rule 36    valuelist -> valuelist value
Rule 37    command -> STR valuelist

Terminals, with rules where they appear

"                    : 4
:                    : 5
END                  : 33
NUMBER               : 3
OPERATOR             : 25
SIGN                 : 27 28 29
STR                  : 33 37
TO                   : 33
VAR                  : 4 5
[                    : 14 23 26 27 27 28 29 29
]                    : 14 23 26 27 27 28 29 29
back                 : 10
bk                   : 11
error                : 
fd                   : 7
forward              : 6
home                 : 18
if                   : 28
ifelse               : 29
left                 : 12
lt                   : 13
make                 : 24 25
pd                   : 20
pendown              : 19
penup                : 21
pu                   : 22
repeat               : 26
right                : 8
rt                   : 9
setpencolor          : 23
setpos               : 14
setx                 : 16
setxy                : 15
sety                 : 17
while                : 27

Nonterminals, with rules where they appear

command              : 1 2
program              : 2 26 27 28 29 29 33 0
value                : 6 7 8 9 10 11 12 13 14 14 15 15 16 17 23 23 23 24 24 25 25 25 26 27 27 28 28 29 29 31 32 35 36
valuelist            : 36 37
varlist              : 32 33

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . command
    (2) program -> . program command
    (6) command -> . forward value
    (7) command -> . fd value
    (8) command -> . right value
    (9) command -> . rt value
    (10) command -> . back value
    (11) command -> . bk value
    (12) command -> . left value
    (13) command -> . lt value
    (14) command -> . setpos [ value value ]
    (15) command -> . setxy value value
    (16) command -> . setx value
    (17) command -> . sety value
    (18) command -> . home
    (19) command -> . pendown
    (20) command -> . pd
    (21) command -> . penup
    (22) command -> . pu
    (23) command -> . setpencolor [ value value value ]
    (24) command -> . make value value
    (25) command -> . make value value OPERATOR value
    (26) command -> . repeat value [ program ]
    (27) command -> . while [ value SIGN value ] [ program ]
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ] [ program ]
    (33) command -> . TO STR varlist program END
    (37) command -> . STR valuelist

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23
    if              shift and go to state 24
    ifelse          shift and go to state 25
    TO              shift and go to state 26
    STR             shift and go to state 27

    program                        shift and go to state 1
    command                        shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . command
    (6) command -> . forward value
    (7) command -> . fd value
    (8) command -> . right value
    (9) command -> . rt value
    (10) command -> . back value
    (11) command -> . bk value
    (12) command -> . left value
    (13) command -> . lt value
    (14) command -> . setpos [ value value ]
    (15) command -> . setxy value value
    (16) command -> . setx value
    (17) command -> . sety value
    (18) command -> . home
    (19) command -> . pendown
    (20) command -> . pd
    (21) command -> . penup
    (22) command -> . pu
    (23) command -> . setpencolor [ value value value ]
    (24) command -> . make value value
    (25) command -> . make value value OPERATOR value
    (26) command -> . repeat value [ program ]
    (27) command -> . while [ value SIGN value ] [ program ]
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ] [ program ]
    (33) command -> . TO STR varlist program END
    (37) command -> . STR valuelist

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23
    if              shift and go to state 24
    ifelse          shift and go to state 25
    TO              shift and go to state 26
    STR             shift and go to state 27

    command                        shift and go to state 28

state 2

    (1) program -> command .

    forward         reduce using rule 1 (program -> command .)
    fd              reduce using rule 1 (program -> command .)
    right           reduce using rule 1 (program -> command .)
    rt              reduce using rule 1 (program -> command .)
    back            reduce using rule 1 (program -> command .)
    bk              reduce using rule 1 (program -> command .)
    left            reduce using rule 1 (program -> command .)
    lt              reduce using rule 1 (program -> command .)
    setpos          reduce using rule 1 (program -> command .)
    setxy           reduce using rule 1 (program -> command .)
    setx            reduce using rule 1 (program -> command .)
    sety            reduce using rule 1 (program -> command .)
    home            reduce using rule 1 (program -> command .)
    pendown         reduce using rule 1 (program -> command .)
    pd              reduce using rule 1 (program -> command .)
    penup           reduce using rule 1 (program -> command .)
    pu              reduce using rule 1 (program -> command .)
    setpencolor     reduce using rule 1 (program -> command .)
    make            reduce using rule 1 (program -> command .)
    repeat          reduce using rule 1 (program -> command .)
    while           reduce using rule 1 (program -> command .)
    if              reduce using rule 1 (program -> command .)
    ifelse          reduce using rule 1 (program -> command .)
    TO              reduce using rule 1 (program -> command .)
    STR             reduce using rule 1 (program -> command .)
    $end            reduce using rule 1 (program -> command .)
    ]               reduce using rule 1 (program -> command .)
    END             reduce using rule 1 (program -> command .)


state 3

    (6) command -> forward . value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 29

state 4

    (7) command -> fd . value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 33

state 5

    (8) command -> right . value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 34

state 6

    (9) command -> rt . value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 35

state 7

    (10) command -> back . value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 36

state 8

    (11) command -> bk . value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 37

state 9

    (12) command -> left . value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 38

state 10

    (13) command -> lt . value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 39

state 11

    (14) command -> setpos . [ value value ]

    [               shift and go to state 40


state 12

    (15) command -> setxy . value value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 41

state 13

    (16) command -> setx . value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 42

state 14

    (17) command -> sety . value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 43

state 15

    (18) command -> home .

    forward         reduce using rule 18 (command -> home .)
    fd              reduce using rule 18 (command -> home .)
    right           reduce using rule 18 (command -> home .)
    rt              reduce using rule 18 (command -> home .)
    back            reduce using rule 18 (command -> home .)
    bk              reduce using rule 18 (command -> home .)
    left            reduce using rule 18 (command -> home .)
    lt              reduce using rule 18 (command -> home .)
    setpos          reduce using rule 18 (command -> home .)
    setxy           reduce using rule 18 (command -> home .)
    setx            reduce using rule 18 (command -> home .)
    sety            reduce using rule 18 (command -> home .)
    home            reduce using rule 18 (command -> home .)
    pendown         reduce using rule 18 (command -> home .)
    pd              reduce using rule 18 (command -> home .)
    penup           reduce using rule 18 (command -> home .)
    pu              reduce using rule 18 (command -> home .)
    setpencolor     reduce using rule 18 (command -> home .)
    make            reduce using rule 18 (command -> home .)
    repeat          reduce using rule 18 (command -> home .)
    while           reduce using rule 18 (command -> home .)
    if              reduce using rule 18 (command -> home .)
    ifelse          reduce using rule 18 (command -> home .)
    TO              reduce using rule 18 (command -> home .)
    STR             reduce using rule 18 (command -> home .)
    $end            reduce using rule 18 (command -> home .)
    ]               reduce using rule 18 (command -> home .)
    END             reduce using rule 18 (command -> home .)


state 16

    (19) command -> pendown .

    forward         reduce using rule 19 (command -> pendown .)
    fd              reduce using rule 19 (command -> pendown .)
    right           reduce using rule 19 (command -> pendown .)
    rt              reduce using rule 19 (command -> pendown .)
    back            reduce using rule 19 (command -> pendown .)
    bk              reduce using rule 19 (command -> pendown .)
    left            reduce using rule 19 (command -> pendown .)
    lt              reduce using rule 19 (command -> pendown .)
    setpos          reduce using rule 19 (command -> pendown .)
    setxy           reduce using rule 19 (command -> pendown .)
    setx            reduce using rule 19 (command -> pendown .)
    sety            reduce using rule 19 (command -> pendown .)
    home            reduce using rule 19 (command -> pendown .)
    pendown         reduce using rule 19 (command -> pendown .)
    pd              reduce using rule 19 (command -> pendown .)
    penup           reduce using rule 19 (command -> pendown .)
    pu              reduce using rule 19 (command -> pendown .)
    setpencolor     reduce using rule 19 (command -> pendown .)
    make            reduce using rule 19 (command -> pendown .)
    repeat          reduce using rule 19 (command -> pendown .)
    while           reduce using rule 19 (command -> pendown .)
    if              reduce using rule 19 (command -> pendown .)
    ifelse          reduce using rule 19 (command -> pendown .)
    TO              reduce using rule 19 (command -> pendown .)
    STR             reduce using rule 19 (command -> pendown .)
    $end            reduce using rule 19 (command -> pendown .)
    ]               reduce using rule 19 (command -> pendown .)
    END             reduce using rule 19 (command -> pendown .)


state 17

    (20) command -> pd .

    forward         reduce using rule 20 (command -> pd .)
    fd              reduce using rule 20 (command -> pd .)
    right           reduce using rule 20 (command -> pd .)
    rt              reduce using rule 20 (command -> pd .)
    back            reduce using rule 20 (command -> pd .)
    bk              reduce using rule 20 (command -> pd .)
    left            reduce using rule 20 (command -> pd .)
    lt              reduce using rule 20 (command -> pd .)
    setpos          reduce using rule 20 (command -> pd .)
    setxy           reduce using rule 20 (command -> pd .)
    setx            reduce using rule 20 (command -> pd .)
    sety            reduce using rule 20 (command -> pd .)
    home            reduce using rule 20 (command -> pd .)
    pendown         reduce using rule 20 (command -> pd .)
    pd              reduce using rule 20 (command -> pd .)
    penup           reduce using rule 20 (command -> pd .)
    pu              reduce using rule 20 (command -> pd .)
    setpencolor     reduce using rule 20 (command -> pd .)
    make            reduce using rule 20 (command -> pd .)
    repeat          reduce using rule 20 (command -> pd .)
    while           reduce using rule 20 (command -> pd .)
    if              reduce using rule 20 (command -> pd .)
    ifelse          reduce using rule 20 (command -> pd .)
    TO              reduce using rule 20 (command -> pd .)
    STR             reduce using rule 20 (command -> pd .)
    $end            reduce using rule 20 (command -> pd .)
    ]               reduce using rule 20 (command -> pd .)
    END             reduce using rule 20 (command -> pd .)


state 18

    (21) command -> penup .

    forward         reduce using rule 21 (command -> penup .)
    fd              reduce using rule 21 (command -> penup .)
    right           reduce using rule 21 (command -> penup .)
    rt              reduce using rule 21 (command -> penup .)
    back            reduce using rule 21 (command -> penup .)
    bk              reduce using rule 21 (command -> penup .)
    left            reduce using rule 21 (command -> penup .)
    lt              reduce using rule 21 (command -> penup .)
    setpos          reduce using rule 21 (command -> penup .)
    setxy           reduce using rule 21 (command -> penup .)
    setx            reduce using rule 21 (command -> penup .)
    sety            reduce using rule 21 (command -> penup .)
    home            reduce using rule 21 (command -> penup .)
    pendown         reduce using rule 21 (command -> penup .)
    pd              reduce using rule 21 (command -> penup .)
    penup           reduce using rule 21 (command -> penup .)
    pu              reduce using rule 21 (command -> penup .)
    setpencolor     reduce using rule 21 (command -> penup .)
    make            reduce using rule 21 (command -> penup .)
    repeat          reduce using rule 21 (command -> penup .)
    while           reduce using rule 21 (command -> penup .)
    if              reduce using rule 21 (command -> penup .)
    ifelse          reduce using rule 21 (command -> penup .)
    TO              reduce using rule 21 (command -> penup .)
    STR             reduce using rule 21 (command -> penup .)
    $end            reduce using rule 21 (command -> penup .)
    ]               reduce using rule 21 (command -> penup .)
    END             reduce using rule 21 (command -> penup .)


state 19

    (22) command -> pu .

    forward         reduce using rule 22 (command -> pu .)
    fd              reduce using rule 22 (command -> pu .)
    right           reduce using rule 22 (command -> pu .)
    rt              reduce using rule 22 (command -> pu .)
    back            reduce using rule 22 (command -> pu .)
    bk              reduce using rule 22 (command -> pu .)
    left            reduce using rule 22 (command -> pu .)
    lt              reduce using rule 22 (command -> pu .)
    setpos          reduce using rule 22 (command -> pu .)
    setxy           reduce using rule 22 (command -> pu .)
    setx            reduce using rule 22 (command -> pu .)
    sety            reduce using rule 22 (command -> pu .)
    home            reduce using rule 22 (command -> pu .)
    pendown         reduce using rule 22 (command -> pu .)
    pd              reduce using rule 22 (command -> pu .)
    penup           reduce using rule 22 (command -> pu .)
    pu              reduce using rule 22 (command -> pu .)
    setpencolor     reduce using rule 22 (command -> pu .)
    make            reduce using rule 22 (command -> pu .)
    repeat          reduce using rule 22 (command -> pu .)
    while           reduce using rule 22 (command -> pu .)
    if              reduce using rule 22 (command -> pu .)
    ifelse          reduce using rule 22 (command -> pu .)
    TO              reduce using rule 22 (command -> pu .)
    STR             reduce using rule 22 (command -> pu .)
    $end            reduce using rule 22 (command -> pu .)
    ]               reduce using rule 22 (command -> pu .)
    END             reduce using rule 22 (command -> pu .)


state 20

    (23) command -> setpencolor . [ value value value ]

    [               shift and go to state 44


state 21

    (24) command -> make . value value
    (25) command -> make . value value OPERATOR value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 45

state 22

    (26) command -> repeat . value [ program ]
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 46

state 23

    (27) command -> while . [ value SIGN value ] [ program ]

    [               shift and go to state 47


state 24

    (28) command -> if . value SIGN value [ program ]
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 48

state 25

    (29) command -> ifelse . value SIGN value [ program ] [ program ]
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 49

state 26

    (33) command -> TO . STR varlist program END

    STR             shift and go to state 50


state 27

    (37) command -> STR . valuelist
    (34) valuelist -> .
    (35) valuelist -> . value
    (36) valuelist -> . valuelist value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for " resolved as shift
  ! shift/reduce conflict for : resolved as shift
    forward         reduce using rule 34 (valuelist -> .)
    fd              reduce using rule 34 (valuelist -> .)
    right           reduce using rule 34 (valuelist -> .)
    rt              reduce using rule 34 (valuelist -> .)
    back            reduce using rule 34 (valuelist -> .)
    bk              reduce using rule 34 (valuelist -> .)
    left            reduce using rule 34 (valuelist -> .)
    lt              reduce using rule 34 (valuelist -> .)
    setpos          reduce using rule 34 (valuelist -> .)
    setxy           reduce using rule 34 (valuelist -> .)
    setx            reduce using rule 34 (valuelist -> .)
    sety            reduce using rule 34 (valuelist -> .)
    home            reduce using rule 34 (valuelist -> .)
    pendown         reduce using rule 34 (valuelist -> .)
    pd              reduce using rule 34 (valuelist -> .)
    penup           reduce using rule 34 (valuelist -> .)
    pu              reduce using rule 34 (valuelist -> .)
    setpencolor     reduce using rule 34 (valuelist -> .)
    make            reduce using rule 34 (valuelist -> .)
    repeat          reduce using rule 34 (valuelist -> .)
    while           reduce using rule 34 (valuelist -> .)
    if              reduce using rule 34 (valuelist -> .)
    ifelse          reduce using rule 34 (valuelist -> .)
    TO              reduce using rule 34 (valuelist -> .)
    STR             reduce using rule 34 (valuelist -> .)
    $end            reduce using rule 34 (valuelist -> .)
    ]               reduce using rule 34 (valuelist -> .)
    END             reduce using rule 34 (valuelist -> .)
    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

  ! NUMBER          [ reduce using rule 34 (valuelist -> .) ]
  ! "               [ reduce using rule 34 (valuelist -> .) ]
  ! :               [ reduce using rule 34 (valuelist -> .) ]

    valuelist                      shift and go to state 51
    value                          shift and go to state 52

state 28

    (2) program -> program command .

    forward         reduce using rule 2 (program -> program command .)
    fd              reduce using rule 2 (program -> program command .)
    right           reduce using rule 2 (program -> program command .)
    rt              reduce using rule 2 (program -> program command .)
    back            reduce using rule 2 (program -> program command .)
    bk              reduce using rule 2 (program -> program command .)
    left            reduce using rule 2 (program -> program command .)
    lt              reduce using rule 2 (program -> program command .)
    setpos          reduce using rule 2 (program -> program command .)
    setxy           reduce using rule 2 (program -> program command .)
    setx            reduce using rule 2 (program -> program command .)
    sety            reduce using rule 2 (program -> program command .)
    home            reduce using rule 2 (program -> program command .)
    pendown         reduce using rule 2 (program -> program command .)
    pd              reduce using rule 2 (program -> program command .)
    penup           reduce using rule 2 (program -> program command .)
    pu              reduce using rule 2 (program -> program command .)
    setpencolor     reduce using rule 2 (program -> program command .)
    make            reduce using rule 2 (program -> program command .)
    repeat          reduce using rule 2 (program -> program command .)
    while           reduce using rule 2 (program -> program command .)
    if              reduce using rule 2 (program -> program command .)
    ifelse          reduce using rule 2 (program -> program command .)
    TO              reduce using rule 2 (program -> program command .)
    STR             reduce using rule 2 (program -> program command .)
    $end            reduce using rule 2 (program -> program command .)
    ]               reduce using rule 2 (program -> program command .)
    END             reduce using rule 2 (program -> program command .)


state 29

    (6) command -> forward value .

    forward         reduce using rule 6 (command -> forward value .)
    fd              reduce using rule 6 (command -> forward value .)
    right           reduce using rule 6 (command -> forward value .)
    rt              reduce using rule 6 (command -> forward value .)
    back            reduce using rule 6 (command -> forward value .)
    bk              reduce using rule 6 (command -> forward value .)
    left            reduce using rule 6 (command -> forward value .)
    lt              reduce using rule 6 (command -> forward value .)
    setpos          reduce using rule 6 (command -> forward value .)
    setxy           reduce using rule 6 (command -> forward value .)
    setx            reduce using rule 6 (command -> forward value .)
    sety            reduce using rule 6 (command -> forward value .)
    home            reduce using rule 6 (command -> forward value .)
    pendown         reduce using rule 6 (command -> forward value .)
    pd              reduce using rule 6 (command -> forward value .)
    penup           reduce using rule 6 (command -> forward value .)
    pu              reduce using rule 6 (command -> forward value .)
    setpencolor     reduce using rule 6 (command -> forward value .)
    make            reduce using rule 6 (command -> forward value .)
    repeat          reduce using rule 6 (command -> forward value .)
    while           reduce using rule 6 (command -> forward value .)
    if              reduce using rule 6 (command -> forward value .)
    ifelse          reduce using rule 6 (command -> forward value .)
    TO              reduce using rule 6 (command -> forward value .)
    STR             reduce using rule 6 (command -> forward value .)
    $end            reduce using rule 6 (command -> forward value .)
    ]               reduce using rule 6 (command -> forward value .)
    END             reduce using rule 6 (command -> forward value .)


state 30

    (3) value -> NUMBER .

    forward         reduce using rule 3 (value -> NUMBER .)
    fd              reduce using rule 3 (value -> NUMBER .)
    right           reduce using rule 3 (value -> NUMBER .)
    rt              reduce using rule 3 (value -> NUMBER .)
    back            reduce using rule 3 (value -> NUMBER .)
    bk              reduce using rule 3 (value -> NUMBER .)
    left            reduce using rule 3 (value -> NUMBER .)
    lt              reduce using rule 3 (value -> NUMBER .)
    setpos          reduce using rule 3 (value -> NUMBER .)
    setxy           reduce using rule 3 (value -> NUMBER .)
    setx            reduce using rule 3 (value -> NUMBER .)
    sety            reduce using rule 3 (value -> NUMBER .)
    home            reduce using rule 3 (value -> NUMBER .)
    pendown         reduce using rule 3 (value -> NUMBER .)
    pd              reduce using rule 3 (value -> NUMBER .)
    penup           reduce using rule 3 (value -> NUMBER .)
    pu              reduce using rule 3 (value -> NUMBER .)
    setpencolor     reduce using rule 3 (value -> NUMBER .)
    make            reduce using rule 3 (value -> NUMBER .)
    repeat          reduce using rule 3 (value -> NUMBER .)
    while           reduce using rule 3 (value -> NUMBER .)
    if              reduce using rule 3 (value -> NUMBER .)
    ifelse          reduce using rule 3 (value -> NUMBER .)
    TO              reduce using rule 3 (value -> NUMBER .)
    STR             reduce using rule 3 (value -> NUMBER .)
    $end            reduce using rule 3 (value -> NUMBER .)
    ]               reduce using rule 3 (value -> NUMBER .)
    END             reduce using rule 3 (value -> NUMBER .)
    NUMBER          reduce using rule 3 (value -> NUMBER .)
    "               reduce using rule 3 (value -> NUMBER .)
    :               reduce using rule 3 (value -> NUMBER .)
    [               reduce using rule 3 (value -> NUMBER .)
    SIGN            reduce using rule 3 (value -> NUMBER .)
    OPERATOR        reduce using rule 3 (value -> NUMBER .)


state 31

    (4) value -> " . VAR

    VAR             shift and go to state 53


state 32

    (5) value -> : . VAR

    VAR             shift and go to state 54


state 33

    (7) command -> fd value .

    forward         reduce using rule 7 (command -> fd value .)
    fd              reduce using rule 7 (command -> fd value .)
    right           reduce using rule 7 (command -> fd value .)
    rt              reduce using rule 7 (command -> fd value .)
    back            reduce using rule 7 (command -> fd value .)
    bk              reduce using rule 7 (command -> fd value .)
    left            reduce using rule 7 (command -> fd value .)
    lt              reduce using rule 7 (command -> fd value .)
    setpos          reduce using rule 7 (command -> fd value .)
    setxy           reduce using rule 7 (command -> fd value .)
    setx            reduce using rule 7 (command -> fd value .)
    sety            reduce using rule 7 (command -> fd value .)
    home            reduce using rule 7 (command -> fd value .)
    pendown         reduce using rule 7 (command -> fd value .)
    pd              reduce using rule 7 (command -> fd value .)
    penup           reduce using rule 7 (command -> fd value .)
    pu              reduce using rule 7 (command -> fd value .)
    setpencolor     reduce using rule 7 (command -> fd value .)
    make            reduce using rule 7 (command -> fd value .)
    repeat          reduce using rule 7 (command -> fd value .)
    while           reduce using rule 7 (command -> fd value .)
    if              reduce using rule 7 (command -> fd value .)
    ifelse          reduce using rule 7 (command -> fd value .)
    TO              reduce using rule 7 (command -> fd value .)
    STR             reduce using rule 7 (command -> fd value .)
    $end            reduce using rule 7 (command -> fd value .)
    ]               reduce using rule 7 (command -> fd value .)
    END             reduce using rule 7 (command -> fd value .)


state 34

    (8) command -> right value .

    forward         reduce using rule 8 (command -> right value .)
    fd              reduce using rule 8 (command -> right value .)
    right           reduce using rule 8 (command -> right value .)
    rt              reduce using rule 8 (command -> right value .)
    back            reduce using rule 8 (command -> right value .)
    bk              reduce using rule 8 (command -> right value .)
    left            reduce using rule 8 (command -> right value .)
    lt              reduce using rule 8 (command -> right value .)
    setpos          reduce using rule 8 (command -> right value .)
    setxy           reduce using rule 8 (command -> right value .)
    setx            reduce using rule 8 (command -> right value .)
    sety            reduce using rule 8 (command -> right value .)
    home            reduce using rule 8 (command -> right value .)
    pendown         reduce using rule 8 (command -> right value .)
    pd              reduce using rule 8 (command -> right value .)
    penup           reduce using rule 8 (command -> right value .)
    pu              reduce using rule 8 (command -> right value .)
    setpencolor     reduce using rule 8 (command -> right value .)
    make            reduce using rule 8 (command -> right value .)
    repeat          reduce using rule 8 (command -> right value .)
    while           reduce using rule 8 (command -> right value .)
    if              reduce using rule 8 (command -> right value .)
    ifelse          reduce using rule 8 (command -> right value .)
    TO              reduce using rule 8 (command -> right value .)
    STR             reduce using rule 8 (command -> right value .)
    $end            reduce using rule 8 (command -> right value .)
    ]               reduce using rule 8 (command -> right value .)
    END             reduce using rule 8 (command -> right value .)


state 35

    (9) command -> rt value .

    forward         reduce using rule 9 (command -> rt value .)
    fd              reduce using rule 9 (command -> rt value .)
    right           reduce using rule 9 (command -> rt value .)
    rt              reduce using rule 9 (command -> rt value .)
    back            reduce using rule 9 (command -> rt value .)
    bk              reduce using rule 9 (command -> rt value .)
    left            reduce using rule 9 (command -> rt value .)
    lt              reduce using rule 9 (command -> rt value .)
    setpos          reduce using rule 9 (command -> rt value .)
    setxy           reduce using rule 9 (command -> rt value .)
    setx            reduce using rule 9 (command -> rt value .)
    sety            reduce using rule 9 (command -> rt value .)
    home            reduce using rule 9 (command -> rt value .)
    pendown         reduce using rule 9 (command -> rt value .)
    pd              reduce using rule 9 (command -> rt value .)
    penup           reduce using rule 9 (command -> rt value .)
    pu              reduce using rule 9 (command -> rt value .)
    setpencolor     reduce using rule 9 (command -> rt value .)
    make            reduce using rule 9 (command -> rt value .)
    repeat          reduce using rule 9 (command -> rt value .)
    while           reduce using rule 9 (command -> rt value .)
    if              reduce using rule 9 (command -> rt value .)
    ifelse          reduce using rule 9 (command -> rt value .)
    TO              reduce using rule 9 (command -> rt value .)
    STR             reduce using rule 9 (command -> rt value .)
    $end            reduce using rule 9 (command -> rt value .)
    ]               reduce using rule 9 (command -> rt value .)
    END             reduce using rule 9 (command -> rt value .)


state 36

    (10) command -> back value .

    forward         reduce using rule 10 (command -> back value .)
    fd              reduce using rule 10 (command -> back value .)
    right           reduce using rule 10 (command -> back value .)
    rt              reduce using rule 10 (command -> back value .)
    back            reduce using rule 10 (command -> back value .)
    bk              reduce using rule 10 (command -> back value .)
    left            reduce using rule 10 (command -> back value .)
    lt              reduce using rule 10 (command -> back value .)
    setpos          reduce using rule 10 (command -> back value .)
    setxy           reduce using rule 10 (command -> back value .)
    setx            reduce using rule 10 (command -> back value .)
    sety            reduce using rule 10 (command -> back value .)
    home            reduce using rule 10 (command -> back value .)
    pendown         reduce using rule 10 (command -> back value .)
    pd              reduce using rule 10 (command -> back value .)
    penup           reduce using rule 10 (command -> back value .)
    pu              reduce using rule 10 (command -> back value .)
    setpencolor     reduce using rule 10 (command -> back value .)
    make            reduce using rule 10 (command -> back value .)
    repeat          reduce using rule 10 (command -> back value .)
    while           reduce using rule 10 (command -> back value .)
    if              reduce using rule 10 (command -> back value .)
    ifelse          reduce using rule 10 (command -> back value .)
    TO              reduce using rule 10 (command -> back value .)
    STR             reduce using rule 10 (command -> back value .)
    $end            reduce using rule 10 (command -> back value .)
    ]               reduce using rule 10 (command -> back value .)
    END             reduce using rule 10 (command -> back value .)


state 37

    (11) command -> bk value .

    forward         reduce using rule 11 (command -> bk value .)
    fd              reduce using rule 11 (command -> bk value .)
    right           reduce using rule 11 (command -> bk value .)
    rt              reduce using rule 11 (command -> bk value .)
    back            reduce using rule 11 (command -> bk value .)
    bk              reduce using rule 11 (command -> bk value .)
    left            reduce using rule 11 (command -> bk value .)
    lt              reduce using rule 11 (command -> bk value .)
    setpos          reduce using rule 11 (command -> bk value .)
    setxy           reduce using rule 11 (command -> bk value .)
    setx            reduce using rule 11 (command -> bk value .)
    sety            reduce using rule 11 (command -> bk value .)
    home            reduce using rule 11 (command -> bk value .)
    pendown         reduce using rule 11 (command -> bk value .)
    pd              reduce using rule 11 (command -> bk value .)
    penup           reduce using rule 11 (command -> bk value .)
    pu              reduce using rule 11 (command -> bk value .)
    setpencolor     reduce using rule 11 (command -> bk value .)
    make            reduce using rule 11 (command -> bk value .)
    repeat          reduce using rule 11 (command -> bk value .)
    while           reduce using rule 11 (command -> bk value .)
    if              reduce using rule 11 (command -> bk value .)
    ifelse          reduce using rule 11 (command -> bk value .)
    TO              reduce using rule 11 (command -> bk value .)
    STR             reduce using rule 11 (command -> bk value .)
    $end            reduce using rule 11 (command -> bk value .)
    ]               reduce using rule 11 (command -> bk value .)
    END             reduce using rule 11 (command -> bk value .)


state 38

    (12) command -> left value .

    forward         reduce using rule 12 (command -> left value .)
    fd              reduce using rule 12 (command -> left value .)
    right           reduce using rule 12 (command -> left value .)
    rt              reduce using rule 12 (command -> left value .)
    back            reduce using rule 12 (command -> left value .)
    bk              reduce using rule 12 (command -> left value .)
    left            reduce using rule 12 (command -> left value .)
    lt              reduce using rule 12 (command -> left value .)
    setpos          reduce using rule 12 (command -> left value .)
    setxy           reduce using rule 12 (command -> left value .)
    setx            reduce using rule 12 (command -> left value .)
    sety            reduce using rule 12 (command -> left value .)
    home            reduce using rule 12 (command -> left value .)
    pendown         reduce using rule 12 (command -> left value .)
    pd              reduce using rule 12 (command -> left value .)
    penup           reduce using rule 12 (command -> left value .)
    pu              reduce using rule 12 (command -> left value .)
    setpencolor     reduce using rule 12 (command -> left value .)
    make            reduce using rule 12 (command -> left value .)
    repeat          reduce using rule 12 (command -> left value .)
    while           reduce using rule 12 (command -> left value .)
    if              reduce using rule 12 (command -> left value .)
    ifelse          reduce using rule 12 (command -> left value .)
    TO              reduce using rule 12 (command -> left value .)
    STR             reduce using rule 12 (command -> left value .)
    $end            reduce using rule 12 (command -> left value .)
    ]               reduce using rule 12 (command -> left value .)
    END             reduce using rule 12 (command -> left value .)


state 39

    (13) command -> lt value .

    forward         reduce using rule 13 (command -> lt value .)
    fd              reduce using rule 13 (command -> lt value .)
    right           reduce using rule 13 (command -> lt value .)
    rt              reduce using rule 13 (command -> lt value .)
    back            reduce using rule 13 (command -> lt value .)
    bk              reduce using rule 13 (command -> lt value .)
    left            reduce using rule 13 (command -> lt value .)
    lt              reduce using rule 13 (command -> lt value .)
    setpos          reduce using rule 13 (command -> lt value .)
    setxy           reduce using rule 13 (command -> lt value .)
    setx            reduce using rule 13 (command -> lt value .)
    sety            reduce using rule 13 (command -> lt value .)
    home            reduce using rule 13 (command -> lt value .)
    pendown         reduce using rule 13 (command -> lt value .)
    pd              reduce using rule 13 (command -> lt value .)
    penup           reduce using rule 13 (command -> lt value .)
    pu              reduce using rule 13 (command -> lt value .)
    setpencolor     reduce using rule 13 (command -> lt value .)
    make            reduce using rule 13 (command -> lt value .)
    repeat          reduce using rule 13 (command -> lt value .)
    while           reduce using rule 13 (command -> lt value .)
    if              reduce using rule 13 (command -> lt value .)
    ifelse          reduce using rule 13 (command -> lt value .)
    TO              reduce using rule 13 (command -> lt value .)
    STR             reduce using rule 13 (command -> lt value .)
    $end            reduce using rule 13 (command -> lt value .)
    ]               reduce using rule 13 (command -> lt value .)
    END             reduce using rule 13 (command -> lt value .)


state 40

    (14) command -> setpos [ . value value ]
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 55

state 41

    (15) command -> setxy value . value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 56

state 42

    (16) command -> setx value .

    forward         reduce using rule 16 (command -> setx value .)
    fd              reduce using rule 16 (command -> setx value .)
    right           reduce using rule 16 (command -> setx value .)
    rt              reduce using rule 16 (command -> setx value .)
    back            reduce using rule 16 (command -> setx value .)
    bk              reduce using rule 16 (command -> setx value .)
    left            reduce using rule 16 (command -> setx value .)
    lt              reduce using rule 16 (command -> setx value .)
    setpos          reduce using rule 16 (command -> setx value .)
    setxy           reduce using rule 16 (command -> setx value .)
    setx            reduce using rule 16 (command -> setx value .)
    sety            reduce using rule 16 (command -> setx value .)
    home            reduce using rule 16 (command -> setx value .)
    pendown         reduce using rule 16 (command -> setx value .)
    pd              reduce using rule 16 (command -> setx value .)
    penup           reduce using rule 16 (command -> setx value .)
    pu              reduce using rule 16 (command -> setx value .)
    setpencolor     reduce using rule 16 (command -> setx value .)
    make            reduce using rule 16 (command -> setx value .)
    repeat          reduce using rule 16 (command -> setx value .)
    while           reduce using rule 16 (command -> setx value .)
    if              reduce using rule 16 (command -> setx value .)
    ifelse          reduce using rule 16 (command -> setx value .)
    TO              reduce using rule 16 (command -> setx value .)
    STR             reduce using rule 16 (command -> setx value .)
    $end            reduce using rule 16 (command -> setx value .)
    ]               reduce using rule 16 (command -> setx value .)
    END             reduce using rule 16 (command -> setx value .)


state 43

    (17) command -> sety value .

    forward         reduce using rule 17 (command -> sety value .)
    fd              reduce using rule 17 (command -> sety value .)
    right           reduce using rule 17 (command -> sety value .)
    rt              reduce using rule 17 (command -> sety value .)
    back            reduce using rule 17 (command -> sety value .)
    bk              reduce using rule 17 (command -> sety value .)
    left            reduce using rule 17 (command -> sety value .)
    lt              reduce using rule 17 (command -> sety value .)
    setpos          reduce using rule 17 (command -> sety value .)
    setxy           reduce using rule 17 (command -> sety value .)
    setx            reduce using rule 17 (command -> sety value .)
    sety            reduce using rule 17 (command -> sety value .)
    home            reduce using rule 17 (command -> sety value .)
    pendown         reduce using rule 17 (command -> sety value .)
    pd              reduce using rule 17 (command -> sety value .)
    penup           reduce using rule 17 (command -> sety value .)
    pu              reduce using rule 17 (command -> sety value .)
    setpencolor     reduce using rule 17 (command -> sety value .)
    make            reduce using rule 17 (command -> sety value .)
    repeat          reduce using rule 17 (command -> sety value .)
    while           reduce using rule 17 (command -> sety value .)
    if              reduce using rule 17 (command -> sety value .)
    ifelse          reduce using rule 17 (command -> sety value .)
    TO              reduce using rule 17 (command -> sety value .)
    STR             reduce using rule 17 (command -> sety value .)
    $end            reduce using rule 17 (command -> sety value .)
    ]               reduce using rule 17 (command -> sety value .)
    END             reduce using rule 17 (command -> sety value .)


state 44

    (23) command -> setpencolor [ . value value value ]
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 57

state 45

    (24) command -> make value . value
    (25) command -> make value . value OPERATOR value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 58

state 46

    (26) command -> repeat value . [ program ]

    [               shift and go to state 59


state 47

    (27) command -> while [ . value SIGN value ] [ program ]
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 60

state 48

    (28) command -> if value . SIGN value [ program ]

    SIGN            shift and go to state 61


state 49

    (29) command -> ifelse value . SIGN value [ program ] [ program ]

    SIGN            shift and go to state 62


state 50

    (33) command -> TO STR . varlist program END
    (30) varlist -> .
    (31) varlist -> . value
    (32) varlist -> . varlist value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for " resolved as shift
  ! shift/reduce conflict for : resolved as shift
    forward         reduce using rule 30 (varlist -> .)
    fd              reduce using rule 30 (varlist -> .)
    right           reduce using rule 30 (varlist -> .)
    rt              reduce using rule 30 (varlist -> .)
    back            reduce using rule 30 (varlist -> .)
    bk              reduce using rule 30 (varlist -> .)
    left            reduce using rule 30 (varlist -> .)
    lt              reduce using rule 30 (varlist -> .)
    setpos          reduce using rule 30 (varlist -> .)
    setxy           reduce using rule 30 (varlist -> .)
    setx            reduce using rule 30 (varlist -> .)
    sety            reduce using rule 30 (varlist -> .)
    home            reduce using rule 30 (varlist -> .)
    pendown         reduce using rule 30 (varlist -> .)
    pd              reduce using rule 30 (varlist -> .)
    penup           reduce using rule 30 (varlist -> .)
    pu              reduce using rule 30 (varlist -> .)
    setpencolor     reduce using rule 30 (varlist -> .)
    make            reduce using rule 30 (varlist -> .)
    repeat          reduce using rule 30 (varlist -> .)
    while           reduce using rule 30 (varlist -> .)
    if              reduce using rule 30 (varlist -> .)
    ifelse          reduce using rule 30 (varlist -> .)
    TO              reduce using rule 30 (varlist -> .)
    STR             reduce using rule 30 (varlist -> .)
    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

  ! NUMBER          [ reduce using rule 30 (varlist -> .) ]
  ! "               [ reduce using rule 30 (varlist -> .) ]
  ! :               [ reduce using rule 30 (varlist -> .) ]

    varlist                        shift and go to state 63
    value                          shift and go to state 64

state 51

    (37) command -> STR valuelist .
    (36) valuelist -> valuelist . value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    forward         reduce using rule 37 (command -> STR valuelist .)
    fd              reduce using rule 37 (command -> STR valuelist .)
    right           reduce using rule 37 (command -> STR valuelist .)
    rt              reduce using rule 37 (command -> STR valuelist .)
    back            reduce using rule 37 (command -> STR valuelist .)
    bk              reduce using rule 37 (command -> STR valuelist .)
    left            reduce using rule 37 (command -> STR valuelist .)
    lt              reduce using rule 37 (command -> STR valuelist .)
    setpos          reduce using rule 37 (command -> STR valuelist .)
    setxy           reduce using rule 37 (command -> STR valuelist .)
    setx            reduce using rule 37 (command -> STR valuelist .)
    sety            reduce using rule 37 (command -> STR valuelist .)
    home            reduce using rule 37 (command -> STR valuelist .)
    pendown         reduce using rule 37 (command -> STR valuelist .)
    pd              reduce using rule 37 (command -> STR valuelist .)
    penup           reduce using rule 37 (command -> STR valuelist .)
    pu              reduce using rule 37 (command -> STR valuelist .)
    setpencolor     reduce using rule 37 (command -> STR valuelist .)
    make            reduce using rule 37 (command -> STR valuelist .)
    repeat          reduce using rule 37 (command -> STR valuelist .)
    while           reduce using rule 37 (command -> STR valuelist .)
    if              reduce using rule 37 (command -> STR valuelist .)
    ifelse          reduce using rule 37 (command -> STR valuelist .)
    TO              reduce using rule 37 (command -> STR valuelist .)
    STR             reduce using rule 37 (command -> STR valuelist .)
    $end            reduce using rule 37 (command -> STR valuelist .)
    ]               reduce using rule 37 (command -> STR valuelist .)
    END             reduce using rule 37 (command -> STR valuelist .)
    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 65

state 52

    (35) valuelist -> value .

    NUMBER          reduce using rule 35 (valuelist -> value .)
    "               reduce using rule 35 (valuelist -> value .)
    :               reduce using rule 35 (valuelist -> value .)
    forward         reduce using rule 35 (valuelist -> value .)
    fd              reduce using rule 35 (valuelist -> value .)
    right           reduce using rule 35 (valuelist -> value .)
    rt              reduce using rule 35 (valuelist -> value .)
    back            reduce using rule 35 (valuelist -> value .)
    bk              reduce using rule 35 (valuelist -> value .)
    left            reduce using rule 35 (valuelist -> value .)
    lt              reduce using rule 35 (valuelist -> value .)
    setpos          reduce using rule 35 (valuelist -> value .)
    setxy           reduce using rule 35 (valuelist -> value .)
    setx            reduce using rule 35 (valuelist -> value .)
    sety            reduce using rule 35 (valuelist -> value .)
    home            reduce using rule 35 (valuelist -> value .)
    pendown         reduce using rule 35 (valuelist -> value .)
    pd              reduce using rule 35 (valuelist -> value .)
    penup           reduce using rule 35 (valuelist -> value .)
    pu              reduce using rule 35 (valuelist -> value .)
    setpencolor     reduce using rule 35 (valuelist -> value .)
    make            reduce using rule 35 (valuelist -> value .)
    repeat          reduce using rule 35 (valuelist -> value .)
    while           reduce using rule 35 (valuelist -> value .)
    if              reduce using rule 35 (valuelist -> value .)
    ifelse          reduce using rule 35 (valuelist -> value .)
    TO              reduce using rule 35 (valuelist -> value .)
    STR             reduce using rule 35 (valuelist -> value .)
    $end            reduce using rule 35 (valuelist -> value .)
    ]               reduce using rule 35 (valuelist -> value .)
    END             reduce using rule 35 (valuelist -> value .)


state 53

    (4) value -> " VAR .

    forward         reduce using rule 4 (value -> " VAR .)
    fd              reduce using rule 4 (value -> " VAR .)
    right           reduce using rule 4 (value -> " VAR .)
    rt              reduce using rule 4 (value -> " VAR .)
    back            reduce using rule 4 (value -> " VAR .)
    bk              reduce using rule 4 (value -> " VAR .)
    left            reduce using rule 4 (value -> " VAR .)
    lt              reduce using rule 4 (value -> " VAR .)
    setpos          reduce using rule 4 (value -> " VAR .)
    setxy           reduce using rule 4 (value -> " VAR .)
    setx            reduce using rule 4 (value -> " VAR .)
    sety            reduce using rule 4 (value -> " VAR .)
    home            reduce using rule 4 (value -> " VAR .)
    pendown         reduce using rule 4 (value -> " VAR .)
    pd              reduce using rule 4 (value -> " VAR .)
    penup           reduce using rule 4 (value -> " VAR .)
    pu              reduce using rule 4 (value -> " VAR .)
    setpencolor     reduce using rule 4 (value -> " VAR .)
    make            reduce using rule 4 (value -> " VAR .)
    repeat          reduce using rule 4 (value -> " VAR .)
    while           reduce using rule 4 (value -> " VAR .)
    if              reduce using rule 4 (value -> " VAR .)
    ifelse          reduce using rule 4 (value -> " VAR .)
    TO              reduce using rule 4 (value -> " VAR .)
    STR             reduce using rule 4 (value -> " VAR .)
    $end            reduce using rule 4 (value -> " VAR .)
    ]               reduce using rule 4 (value -> " VAR .)
    END             reduce using rule 4 (value -> " VAR .)
    NUMBER          reduce using rule 4 (value -> " VAR .)
    "               reduce using rule 4 (value -> " VAR .)
    :               reduce using rule 4 (value -> " VAR .)
    [               reduce using rule 4 (value -> " VAR .)
    SIGN            reduce using rule 4 (value -> " VAR .)
    OPERATOR        reduce using rule 4 (value -> " VAR .)


state 54

    (5) value -> : VAR .

    forward         reduce using rule 5 (value -> : VAR .)
    fd              reduce using rule 5 (value -> : VAR .)
    right           reduce using rule 5 (value -> : VAR .)
    rt              reduce using rule 5 (value -> : VAR .)
    back            reduce using rule 5 (value -> : VAR .)
    bk              reduce using rule 5 (value -> : VAR .)
    left            reduce using rule 5 (value -> : VAR .)
    lt              reduce using rule 5 (value -> : VAR .)
    setpos          reduce using rule 5 (value -> : VAR .)
    setxy           reduce using rule 5 (value -> : VAR .)
    setx            reduce using rule 5 (value -> : VAR .)
    sety            reduce using rule 5 (value -> : VAR .)
    home            reduce using rule 5 (value -> : VAR .)
    pendown         reduce using rule 5 (value -> : VAR .)
    pd              reduce using rule 5 (value -> : VAR .)
    penup           reduce using rule 5 (value -> : VAR .)
    pu              reduce using rule 5 (value -> : VAR .)
    setpencolor     reduce using rule 5 (value -> : VAR .)
    make            reduce using rule 5 (value -> : VAR .)
    repeat          reduce using rule 5 (value -> : VAR .)
    while           reduce using rule 5 (value -> : VAR .)
    if              reduce using rule 5 (value -> : VAR .)
    ifelse          reduce using rule 5 (value -> : VAR .)
    TO              reduce using rule 5 (value -> : VAR .)
    STR             reduce using rule 5 (value -> : VAR .)
    $end            reduce using rule 5 (value -> : VAR .)
    ]               reduce using rule 5 (value -> : VAR .)
    END             reduce using rule 5 (value -> : VAR .)
    NUMBER          reduce using rule 5 (value -> : VAR .)
    "               reduce using rule 5 (value -> : VAR .)
    :               reduce using rule 5 (value -> : VAR .)
    [               reduce using rule 5 (value -> : VAR .)
    SIGN            reduce using rule 5 (value -> : VAR .)
    OPERATOR        reduce using rule 5 (value -> : VAR .)


state 55

    (14) command -> setpos [ value . value ]
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 66

state 56

    (15) command -> setxy value value .

    forward         reduce using rule 15 (command -> setxy value value .)
    fd              reduce using rule 15 (command -> setxy value value .)
    right           reduce using rule 15 (command -> setxy value value .)
    rt              reduce using rule 15 (command -> setxy value value .)
    back            reduce using rule 15 (command -> setxy value value .)
    bk              reduce using rule 15 (command -> setxy value value .)
    left            reduce using rule 15 (command -> setxy value value .)
    lt              reduce using rule 15 (command -> setxy value value .)
    setpos          reduce using rule 15 (command -> setxy value value .)
    setxy           reduce using rule 15 (command -> setxy value value .)
    setx            reduce using rule 15 (command -> setxy value value .)
    sety            reduce using rule 15 (command -> setxy value value .)
    home            reduce using rule 15 (command -> setxy value value .)
    pendown         reduce using rule 15 (command -> setxy value value .)
    pd              reduce using rule 15 (command -> setxy value value .)
    penup           reduce using rule 15 (command -> setxy value value .)
    pu              reduce using rule 15 (command -> setxy value value .)
    setpencolor     reduce using rule 15 (command -> setxy value value .)
    make            reduce using rule 15 (command -> setxy value value .)
    repeat          reduce using rule 15 (command -> setxy value value .)
    while           reduce using rule 15 (command -> setxy value value .)
    if              reduce using rule 15 (command -> setxy value value .)
    ifelse          reduce using rule 15 (command -> setxy value value .)
    TO              reduce using rule 15 (command -> setxy value value .)
    STR             reduce using rule 15 (command -> setxy value value .)
    $end            reduce using rule 15 (command -> setxy value value .)
    ]               reduce using rule 15 (command -> setxy value value .)
    END             reduce using rule 15 (command -> setxy value value .)


state 57

    (23) command -> setpencolor [ value . value value ]
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 67

state 58

    (24) command -> make value value .
    (25) command -> make value value . OPERATOR value

    forward         reduce using rule 24 (command -> make value value .)
    fd              reduce using rule 24 (command -> make value value .)
    right           reduce using rule 24 (command -> make value value .)
    rt              reduce using rule 24 (command -> make value value .)
    back            reduce using rule 24 (command -> make value value .)
    bk              reduce using rule 24 (command -> make value value .)
    left            reduce using rule 24 (command -> make value value .)
    lt              reduce using rule 24 (command -> make value value .)
    setpos          reduce using rule 24 (command -> make value value .)
    setxy           reduce using rule 24 (command -> make value value .)
    setx            reduce using rule 24 (command -> make value value .)
    sety            reduce using rule 24 (command -> make value value .)
    home            reduce using rule 24 (command -> make value value .)
    pendown         reduce using rule 24 (command -> make value value .)
    pd              reduce using rule 24 (command -> make value value .)
    penup           reduce using rule 24 (command -> make value value .)
    pu              reduce using rule 24 (command -> make value value .)
    setpencolor     reduce using rule 24 (command -> make value value .)
    make            reduce using rule 24 (command -> make value value .)
    repeat          reduce using rule 24 (command -> make value value .)
    while           reduce using rule 24 (command -> make value value .)
    if              reduce using rule 24 (command -> make value value .)
    ifelse          reduce using rule 24 (command -> make value value .)
    TO              reduce using rule 24 (command -> make value value .)
    STR             reduce using rule 24 (command -> make value value .)
    $end            reduce using rule 24 (command -> make value value .)
    ]               reduce using rule 24 (command -> make value value .)
    END             reduce using rule 24 (command -> make value value .)
    OPERATOR        shift and go to state 68


state 59

    (26) command -> repeat value [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (6) command -> . forward value
    (7) command -> . fd value
    (8) command -> . right value
    (9) command -> . rt value
    (10) command -> . back value
    (11) command -> . bk value
    (12) command -> . left value
    (13) command -> . lt value
    (14) command -> . setpos [ value value ]
    (15) command -> . setxy value value
    (16) command -> . setx value
    (17) command -> . sety value
    (18) command -> . home
    (19) command -> . pendown
    (20) command -> . pd
    (21) command -> . penup
    (22) command -> . pu
    (23) command -> . setpencolor [ value value value ]
    (24) command -> . make value value
    (25) command -> . make value value OPERATOR value
    (26) command -> . repeat value [ program ]
    (27) command -> . while [ value SIGN value ] [ program ]
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ] [ program ]
    (33) command -> . TO STR varlist program END
    (37) command -> . STR valuelist

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23
    if              shift and go to state 24
    ifelse          shift and go to state 25
    TO              shift and go to state 26
    STR             shift and go to state 27

    program                        shift and go to state 69
    command                        shift and go to state 2

state 60

    (27) command -> while [ value . SIGN value ] [ program ]

    SIGN            shift and go to state 70


state 61

    (28) command -> if value SIGN . value [ program ]
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 71

state 62

    (29) command -> ifelse value SIGN . value [ program ] [ program ]
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 72

state 63

    (33) command -> TO STR varlist . program END
    (32) varlist -> varlist . value
    (1) program -> . command
    (2) program -> . program command
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR
    (6) command -> . forward value
    (7) command -> . fd value
    (8) command -> . right value
    (9) command -> . rt value
    (10) command -> . back value
    (11) command -> . bk value
    (12) command -> . left value
    (13) command -> . lt value
    (14) command -> . setpos [ value value ]
    (15) command -> . setxy value value
    (16) command -> . setx value
    (17) command -> . sety value
    (18) command -> . home
    (19) command -> . pendown
    (20) command -> . pd
    (21) command -> . penup
    (22) command -> . pu
    (23) command -> . setpencolor [ value value value ]
    (24) command -> . make value value
    (25) command -> . make value value OPERATOR value
    (26) command -> . repeat value [ program ]
    (27) command -> . while [ value SIGN value ] [ program ]
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ] [ program ]
    (33) command -> . TO STR varlist program END
    (37) command -> . STR valuelist

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23
    if              shift and go to state 24
    ifelse          shift and go to state 25
    TO              shift and go to state 26
    STR             shift and go to state 27

    program                        shift and go to state 73
    value                          shift and go to state 74
    command                        shift and go to state 2

state 64

    (31) varlist -> value .

    NUMBER          reduce using rule 31 (varlist -> value .)
    "               reduce using rule 31 (varlist -> value .)
    :               reduce using rule 31 (varlist -> value .)
    forward         reduce using rule 31 (varlist -> value .)
    fd              reduce using rule 31 (varlist -> value .)
    right           reduce using rule 31 (varlist -> value .)
    rt              reduce using rule 31 (varlist -> value .)
    back            reduce using rule 31 (varlist -> value .)
    bk              reduce using rule 31 (varlist -> value .)
    left            reduce using rule 31 (varlist -> value .)
    lt              reduce using rule 31 (varlist -> value .)
    setpos          reduce using rule 31 (varlist -> value .)
    setxy           reduce using rule 31 (varlist -> value .)
    setx            reduce using rule 31 (varlist -> value .)
    sety            reduce using rule 31 (varlist -> value .)
    home            reduce using rule 31 (varlist -> value .)
    pendown         reduce using rule 31 (varlist -> value .)
    pd              reduce using rule 31 (varlist -> value .)
    penup           reduce using rule 31 (varlist -> value .)
    pu              reduce using rule 31 (varlist -> value .)
    setpencolor     reduce using rule 31 (varlist -> value .)
    make            reduce using rule 31 (varlist -> value .)
    repeat          reduce using rule 31 (varlist -> value .)
    while           reduce using rule 31 (varlist -> value .)
    if              reduce using rule 31 (varlist -> value .)
    ifelse          reduce using rule 31 (varlist -> value .)
    TO              reduce using rule 31 (varlist -> value .)
    STR             reduce using rule 31 (varlist -> value .)


state 65

    (36) valuelist -> valuelist value .

    NUMBER          reduce using rule 36 (valuelist -> valuelist value .)
    "               reduce using rule 36 (valuelist -> valuelist value .)
    :               reduce using rule 36 (valuelist -> valuelist value .)
    forward         reduce using rule 36 (valuelist -> valuelist value .)
    fd              reduce using rule 36 (valuelist -> valuelist value .)
    right           reduce using rule 36 (valuelist -> valuelist value .)
    rt              reduce using rule 36 (valuelist -> valuelist value .)
    back            reduce using rule 36 (valuelist -> valuelist value .)
    bk              reduce using rule 36 (valuelist -> valuelist value .)
    left            reduce using rule 36 (valuelist -> valuelist value .)
    lt              reduce using rule 36 (valuelist -> valuelist value .)
    setpos          reduce using rule 36 (valuelist -> valuelist value .)
    setxy           reduce using rule 36 (valuelist -> valuelist value .)
    setx            reduce using rule 36 (valuelist -> valuelist value .)
    sety            reduce using rule 36 (valuelist -> valuelist value .)
    home            reduce using rule 36 (valuelist -> valuelist value .)
    pendown         reduce using rule 36 (valuelist -> valuelist value .)
    pd              reduce using rule 36 (valuelist -> valuelist value .)
    penup           reduce using rule 36 (valuelist -> valuelist value .)
    pu              reduce using rule 36 (valuelist -> valuelist value .)
    setpencolor     reduce using rule 36 (valuelist -> valuelist value .)
    make            reduce using rule 36 (valuelist -> valuelist value .)
    repeat          reduce using rule 36 (valuelist -> valuelist value .)
    while           reduce using rule 36 (valuelist -> valuelist value .)
    if              reduce using rule 36 (valuelist -> valuelist value .)
    ifelse          reduce using rule 36 (valuelist -> valuelist value .)
    TO              reduce using rule 36 (valuelist -> valuelist value .)
    STR             reduce using rule 36 (valuelist -> valuelist value .)
    $end            reduce using rule 36 (valuelist -> valuelist value .)
    ]               reduce using rule 36 (valuelist -> valuelist value .)
    END             reduce using rule 36 (valuelist -> valuelist value .)


state 66

    (14) command -> setpos [ value value . ]

    ]               shift and go to state 75


state 67

    (23) command -> setpencolor [ value value . value ]
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 76

state 68

    (25) command -> make value value OPERATOR . value
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 77

state 69

    (26) command -> repeat value [ program . ]
    (2) program -> program . command
    (6) command -> . forward value
    (7) command -> . fd value
    (8) command -> . right value
    (9) command -> . rt value
    (10) command -> . back value
    (11) command -> . bk value
    (12) command -> . left value
    (13) command -> . lt value
    (14) command -> . setpos [ value value ]
    (15) command -> . setxy value value
    (16) command -> . setx value
    (17) command -> . sety value
    (18) command -> . home
    (19) command -> . pendown
    (20) command -> . pd
    (21) command -> . penup
    (22) command -> . pu
    (23) command -> . setpencolor [ value value value ]
    (24) command -> . make value value
    (25) command -> . make value value OPERATOR value
    (26) command -> . repeat value [ program ]
    (27) command -> . while [ value SIGN value ] [ program ]
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ] [ program ]
    (33) command -> . TO STR varlist program END
    (37) command -> . STR valuelist

    ]               shift and go to state 78
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23
    if              shift and go to state 24
    ifelse          shift and go to state 25
    TO              shift and go to state 26
    STR             shift and go to state 27

    command                        shift and go to state 28

state 70

    (27) command -> while [ value SIGN . value ] [ program ]
    (3) value -> . NUMBER
    (4) value -> . " VAR
    (5) value -> . : VAR

    NUMBER          shift and go to state 30
    "               shift and go to state 31
    :               shift and go to state 32

    value                          shift and go to state 79

state 71

    (28) command -> if value SIGN value . [ program ]

    [               shift and go to state 80


state 72

    (29) command -> ifelse value SIGN value . [ program ] [ program ]

    [               shift and go to state 81


state 73

    (33) command -> TO STR varlist program . END
    (2) program -> program . command
    (6) command -> . forward value
    (7) command -> . fd value
    (8) command -> . right value
    (9) command -> . rt value
    (10) command -> . back value
    (11) command -> . bk value
    (12) command -> . left value
    (13) command -> . lt value
    (14) command -> . setpos [ value value ]
    (15) command -> . setxy value value
    (16) command -> . setx value
    (17) command -> . sety value
    (18) command -> . home
    (19) command -> . pendown
    (20) command -> . pd
    (21) command -> . penup
    (22) command -> . pu
    (23) command -> . setpencolor [ value value value ]
    (24) command -> . make value value
    (25) command -> . make value value OPERATOR value
    (26) command -> . repeat value [ program ]
    (27) command -> . while [ value SIGN value ] [ program ]
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ] [ program ]
    (33) command -> . TO STR varlist program END
    (37) command -> . STR valuelist

    END             shift and go to state 82
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23
    if              shift and go to state 24
    ifelse          shift and go to state 25
    TO              shift and go to state 26
    STR             shift and go to state 27

    command                        shift and go to state 28

state 74

    (32) varlist -> varlist value .

    NUMBER          reduce using rule 32 (varlist -> varlist value .)
    "               reduce using rule 32 (varlist -> varlist value .)
    :               reduce using rule 32 (varlist -> varlist value .)
    forward         reduce using rule 32 (varlist -> varlist value .)
    fd              reduce using rule 32 (varlist -> varlist value .)
    right           reduce using rule 32 (varlist -> varlist value .)
    rt              reduce using rule 32 (varlist -> varlist value .)
    back            reduce using rule 32 (varlist -> varlist value .)
    bk              reduce using rule 32 (varlist -> varlist value .)
    left            reduce using rule 32 (varlist -> varlist value .)
    lt              reduce using rule 32 (varlist -> varlist value .)
    setpos          reduce using rule 32 (varlist -> varlist value .)
    setxy           reduce using rule 32 (varlist -> varlist value .)
    setx            reduce using rule 32 (varlist -> varlist value .)
    sety            reduce using rule 32 (varlist -> varlist value .)
    home            reduce using rule 32 (varlist -> varlist value .)
    pendown         reduce using rule 32 (varlist -> varlist value .)
    pd              reduce using rule 32 (varlist -> varlist value .)
    penup           reduce using rule 32 (varlist -> varlist value .)
    pu              reduce using rule 32 (varlist -> varlist value .)
    setpencolor     reduce using rule 32 (varlist -> varlist value .)
    make            reduce using rule 32 (varlist -> varlist value .)
    repeat          reduce using rule 32 (varlist -> varlist value .)
    while           reduce using rule 32 (varlist -> varlist value .)
    if              reduce using rule 32 (varlist -> varlist value .)
    ifelse          reduce using rule 32 (varlist -> varlist value .)
    TO              reduce using rule 32 (varlist -> varlist value .)
    STR             reduce using rule 32 (varlist -> varlist value .)


state 75

    (14) command -> setpos [ value value ] .

    forward         reduce using rule 14 (command -> setpos [ value value ] .)
    fd              reduce using rule 14 (command -> setpos [ value value ] .)
    right           reduce using rule 14 (command -> setpos [ value value ] .)
    rt              reduce using rule 14 (command -> setpos [ value value ] .)
    back            reduce using rule 14 (command -> setpos [ value value ] .)
    bk              reduce using rule 14 (command -> setpos [ value value ] .)
    left            reduce using rule 14 (command -> setpos [ value value ] .)
    lt              reduce using rule 14 (command -> setpos [ value value ] .)
    setpos          reduce using rule 14 (command -> setpos [ value value ] .)
    setxy           reduce using rule 14 (command -> setpos [ value value ] .)
    setx            reduce using rule 14 (command -> setpos [ value value ] .)
    sety            reduce using rule 14 (command -> setpos [ value value ] .)
    home            reduce using rule 14 (command -> setpos [ value value ] .)
    pendown         reduce using rule 14 (command -> setpos [ value value ] .)
    pd              reduce using rule 14 (command -> setpos [ value value ] .)
    penup           reduce using rule 14 (command -> setpos [ value value ] .)
    pu              reduce using rule 14 (command -> setpos [ value value ] .)
    setpencolor     reduce using rule 14 (command -> setpos [ value value ] .)
    make            reduce using rule 14 (command -> setpos [ value value ] .)
    repeat          reduce using rule 14 (command -> setpos [ value value ] .)
    while           reduce using rule 14 (command -> setpos [ value value ] .)
    if              reduce using rule 14 (command -> setpos [ value value ] .)
    ifelse          reduce using rule 14 (command -> setpos [ value value ] .)
    TO              reduce using rule 14 (command -> setpos [ value value ] .)
    STR             reduce using rule 14 (command -> setpos [ value value ] .)
    $end            reduce using rule 14 (command -> setpos [ value value ] .)
    ]               reduce using rule 14 (command -> setpos [ value value ] .)
    END             reduce using rule 14 (command -> setpos [ value value ] .)


state 76

    (23) command -> setpencolor [ value value value . ]

    ]               shift and go to state 83


state 77

    (25) command -> make value value OPERATOR value .

    forward         reduce using rule 25 (command -> make value value OPERATOR value .)
    fd              reduce using rule 25 (command -> make value value OPERATOR value .)
    right           reduce using rule 25 (command -> make value value OPERATOR value .)
    rt              reduce using rule 25 (command -> make value value OPERATOR value .)
    back            reduce using rule 25 (command -> make value value OPERATOR value .)
    bk              reduce using rule 25 (command -> make value value OPERATOR value .)
    left            reduce using rule 25 (command -> make value value OPERATOR value .)
    lt              reduce using rule 25 (command -> make value value OPERATOR value .)
    setpos          reduce using rule 25 (command -> make value value OPERATOR value .)
    setxy           reduce using rule 25 (command -> make value value OPERATOR value .)
    setx            reduce using rule 25 (command -> make value value OPERATOR value .)
    sety            reduce using rule 25 (command -> make value value OPERATOR value .)
    home            reduce using rule 25 (command -> make value value OPERATOR value .)
    pendown         reduce using rule 25 (command -> make value value OPERATOR value .)
    pd              reduce using rule 25 (command -> make value value OPERATOR value .)
    penup           reduce using rule 25 (command -> make value value OPERATOR value .)
    pu              reduce using rule 25 (command -> make value value OPERATOR value .)
    setpencolor     reduce using rule 25 (command -> make value value OPERATOR value .)
    make            reduce using rule 25 (command -> make value value OPERATOR value .)
    repeat          reduce using rule 25 (command -> make value value OPERATOR value .)
    while           reduce using rule 25 (command -> make value value OPERATOR value .)
    if              reduce using rule 25 (command -> make value value OPERATOR value .)
    ifelse          reduce using rule 25 (command -> make value value OPERATOR value .)
    TO              reduce using rule 25 (command -> make value value OPERATOR value .)
    STR             reduce using rule 25 (command -> make value value OPERATOR value .)
    $end            reduce using rule 25 (command -> make value value OPERATOR value .)
    ]               reduce using rule 25 (command -> make value value OPERATOR value .)
    END             reduce using rule 25 (command -> make value value OPERATOR value .)


state 78

    (26) command -> repeat value [ program ] .

    forward         reduce using rule 26 (command -> repeat value [ program ] .)
    fd              reduce using rule 26 (command -> repeat value [ program ] .)
    right           reduce using rule 26 (command -> repeat value [ program ] .)
    rt              reduce using rule 26 (command -> repeat value [ program ] .)
    back            reduce using rule 26 (command -> repeat value [ program ] .)
    bk              reduce using rule 26 (command -> repeat value [ program ] .)
    left            reduce using rule 26 (command -> repeat value [ program ] .)
    lt              reduce using rule 26 (command -> repeat value [ program ] .)
    setpos          reduce using rule 26 (command -> repeat value [ program ] .)
    setxy           reduce using rule 26 (command -> repeat value [ program ] .)
    setx            reduce using rule 26 (command -> repeat value [ program ] .)
    sety            reduce using rule 26 (command -> repeat value [ program ] .)
    home            reduce using rule 26 (command -> repeat value [ program ] .)
    pendown         reduce using rule 26 (command -> repeat value [ program ] .)
    pd              reduce using rule 26 (command -> repeat value [ program ] .)
    penup           reduce using rule 26 (command -> repeat value [ program ] .)
    pu              reduce using rule 26 (command -> repeat value [ program ] .)
    setpencolor     reduce using rule 26 (command -> repeat value [ program ] .)
    make            reduce using rule 26 (command -> repeat value [ program ] .)
    repeat          reduce using rule 26 (command -> repeat value [ program ] .)
    while           reduce using rule 26 (command -> repeat value [ program ] .)
    if              reduce using rule 26 (command -> repeat value [ program ] .)
    ifelse          reduce using rule 26 (command -> repeat value [ program ] .)
    TO              reduce using rule 26 (command -> repeat value [ program ] .)
    STR             reduce using rule 26 (command -> repeat value [ program ] .)
    $end            reduce using rule 26 (command -> repeat value [ program ] .)
    ]               reduce using rule 26 (command -> repeat value [ program ] .)
    END             reduce using rule 26 (command -> repeat value [ program ] .)


state 79

    (27) command -> while [ value SIGN value . ] [ program ]

    ]               shift and go to state 84


state 80

    (28) command -> if value SIGN value [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (6) command -> . forward value
    (7) command -> . fd value
    (8) command -> . right value
    (9) command -> . rt value
    (10) command -> . back value
    (11) command -> . bk value
    (12) command -> . left value
    (13) command -> . lt value
    (14) command -> . setpos [ value value ]
    (15) command -> . setxy value value
    (16) command -> . setx value
    (17) command -> . sety value
    (18) command -> . home
    (19) command -> . pendown
    (20) command -> . pd
    (21) command -> . penup
    (22) command -> . pu
    (23) command -> . setpencolor [ value value value ]
    (24) command -> . make value value
    (25) command -> . make value value OPERATOR value
    (26) command -> . repeat value [ program ]
    (27) command -> . while [ value SIGN value ] [ program ]
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ] [ program ]
    (33) command -> . TO STR varlist program END
    (37) command -> . STR valuelist

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23
    if              shift and go to state 24
    ifelse          shift and go to state 25
    TO              shift and go to state 26
    STR             shift and go to state 27

    program                        shift and go to state 85
    command                        shift and go to state 2

state 81

    (29) command -> ifelse value SIGN value [ . program ] [ program ]
    (1) program -> . command
    (2) program -> . program command
    (6) command -> . forward value
    (7) command -> . fd value
    (8) command -> . right value
    (9) command -> . rt value
    (10) command -> . back value
    (11) command -> . bk value
    (12) command -> . left value
    (13) command -> . lt value
    (14) command -> . setpos [ value value ]
    (15) command -> . setxy value value
    (16) command -> . setx value
    (17) command -> . sety value
    (18) command -> . home
    (19) command -> . pendown
    (20) command -> . pd
    (21) command -> . penup
    (22) command -> . pu
    (23) command -> . setpencolor [ value value value ]
    (24) command -> . make value value
    (25) command -> . make value value OPERATOR value
    (26) command -> . repeat value [ program ]
    (27) command -> . while [ value SIGN value ] [ program ]
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ] [ program ]
    (33) command -> . TO STR varlist program END
    (37) command -> . STR valuelist

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23
    if              shift and go to state 24
    ifelse          shift and go to state 25
    TO              shift and go to state 26
    STR             shift and go to state 27

    program                        shift and go to state 86
    command                        shift and go to state 2

state 82

    (33) command -> TO STR varlist program END .

    forward         reduce using rule 33 (command -> TO STR varlist program END .)
    fd              reduce using rule 33 (command -> TO STR varlist program END .)
    right           reduce using rule 33 (command -> TO STR varlist program END .)
    rt              reduce using rule 33 (command -> TO STR varlist program END .)
    back            reduce using rule 33 (command -> TO STR varlist program END .)
    bk              reduce using rule 33 (command -> TO STR varlist program END .)
    left            reduce using rule 33 (command -> TO STR varlist program END .)
    lt              reduce using rule 33 (command -> TO STR varlist program END .)
    setpos          reduce using rule 33 (command -> TO STR varlist program END .)
    setxy           reduce using rule 33 (command -> TO STR varlist program END .)
    setx            reduce using rule 33 (command -> TO STR varlist program END .)
    sety            reduce using rule 33 (command -> TO STR varlist program END .)
    home            reduce using rule 33 (command -> TO STR varlist program END .)
    pendown         reduce using rule 33 (command -> TO STR varlist program END .)
    pd              reduce using rule 33 (command -> TO STR varlist program END .)
    penup           reduce using rule 33 (command -> TO STR varlist program END .)
    pu              reduce using rule 33 (command -> TO STR varlist program END .)
    setpencolor     reduce using rule 33 (command -> TO STR varlist program END .)
    make            reduce using rule 33 (command -> TO STR varlist program END .)
    repeat          reduce using rule 33 (command -> TO STR varlist program END .)
    while           reduce using rule 33 (command -> TO STR varlist program END .)
    if              reduce using rule 33 (command -> TO STR varlist program END .)
    ifelse          reduce using rule 33 (command -> TO STR varlist program END .)
    TO              reduce using rule 33 (command -> TO STR varlist program END .)
    STR             reduce using rule 33 (command -> TO STR varlist program END .)
    $end            reduce using rule 33 (command -> TO STR varlist program END .)
    ]               reduce using rule 33 (command -> TO STR varlist program END .)
    END             reduce using rule 33 (command -> TO STR varlist program END .)


state 83

    (23) command -> setpencolor [ value value value ] .

    forward         reduce using rule 23 (command -> setpencolor [ value value value ] .)
    fd              reduce using rule 23 (command -> setpencolor [ value value value ] .)
    right           reduce using rule 23 (command -> setpencolor [ value value value ] .)
    rt              reduce using rule 23 (command -> setpencolor [ value value value ] .)
    back            reduce using rule 23 (command -> setpencolor [ value value value ] .)
    bk              reduce using rule 23 (command -> setpencolor [ value value value ] .)
    left            reduce using rule 23 (command -> setpencolor [ value value value ] .)
    lt              reduce using rule 23 (command -> setpencolor [ value value value ] .)
    setpos          reduce using rule 23 (command -> setpencolor [ value value value ] .)
    setxy           reduce using rule 23 (command -> setpencolor [ value value value ] .)
    setx            reduce using rule 23 (command -> setpencolor [ value value value ] .)
    sety            reduce using rule 23 (command -> setpencolor [ value value value ] .)
    home            reduce using rule 23 (command -> setpencolor [ value value value ] .)
    pendown         reduce using rule 23 (command -> setpencolor [ value value value ] .)
    pd              reduce using rule 23 (command -> setpencolor [ value value value ] .)
    penup           reduce using rule 23 (command -> setpencolor [ value value value ] .)
    pu              reduce using rule 23 (command -> setpencolor [ value value value ] .)
    setpencolor     reduce using rule 23 (command -> setpencolor [ value value value ] .)
    make            reduce using rule 23 (command -> setpencolor [ value value value ] .)
    repeat          reduce using rule 23 (command -> setpencolor [ value value value ] .)
    while           reduce using rule 23 (command -> setpencolor [ value value value ] .)
    if              reduce using rule 23 (command -> setpencolor [ value value value ] .)
    ifelse          reduce using rule 23 (command -> setpencolor [ value value value ] .)
    TO              reduce using rule 23 (command -> setpencolor [ value value value ] .)
    STR             reduce using rule 23 (command -> setpencolor [ value value value ] .)
    $end            reduce using rule 23 (command -> setpencolor [ value value value ] .)
    ]               reduce using rule 23 (command -> setpencolor [ value value value ] .)
    END             reduce using rule 23 (command -> setpencolor [ value value value ] .)


state 84

    (27) command -> while [ value SIGN value ] . [ program ]

    [               shift and go to state 87


state 85

    (28) command -> if value SIGN value [ program . ]
    (2) program -> program . command
    (6) command -> . forward value
    (7) command -> . fd value
    (8) command -> . right value
    (9) command -> . rt value
    (10) command -> . back value
    (11) command -> . bk value
    (12) command -> . left value
    (13) command -> . lt value
    (14) command -> . setpos [ value value ]
    (15) command -> . setxy value value
    (16) command -> . setx value
    (17) command -> . sety value
    (18) command -> . home
    (19) command -> . pendown
    (20) command -> . pd
    (21) command -> . penup
    (22) command -> . pu
    (23) command -> . setpencolor [ value value value ]
    (24) command -> . make value value
    (25) command -> . make value value OPERATOR value
    (26) command -> . repeat value [ program ]
    (27) command -> . while [ value SIGN value ] [ program ]
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ] [ program ]
    (33) command -> . TO STR varlist program END
    (37) command -> . STR valuelist

    ]               shift and go to state 88
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23
    if              shift and go to state 24
    ifelse          shift and go to state 25
    TO              shift and go to state 26
    STR             shift and go to state 27

    command                        shift and go to state 28

state 86

    (29) command -> ifelse value SIGN value [ program . ] [ program ]
    (2) program -> program . command
    (6) command -> . forward value
    (7) command -> . fd value
    (8) command -> . right value
    (9) command -> . rt value
    (10) command -> . back value
    (11) command -> . bk value
    (12) command -> . left value
    (13) command -> . lt value
    (14) command -> . setpos [ value value ]
    (15) command -> . setxy value value
    (16) command -> . setx value
    (17) command -> . sety value
    (18) command -> . home
    (19) command -> . pendown
    (20) command -> . pd
    (21) command -> . penup
    (22) command -> . pu
    (23) command -> . setpencolor [ value value value ]
    (24) command -> . make value value
    (25) command -> . make value value OPERATOR value
    (26) command -> . repeat value [ program ]
    (27) command -> . while [ value SIGN value ] [ program ]
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ] [ program ]
    (33) command -> . TO STR varlist program END
    (37) command -> . STR valuelist

    ]               shift and go to state 89
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23
    if              shift and go to state 24
    ifelse          shift and go to state 25
    TO              shift and go to state 26
    STR             shift and go to state 27

    command                        shift and go to state 28

state 87

    (27) command -> while [ value SIGN value ] [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (6) command -> . forward value
    (7) command -> . fd value
    (8) command -> . right value
    (9) command -> . rt value
    (10) command -> . back value
    (11) command -> . bk value
    (12) command -> . left value
    (13) command -> . lt value
    (14) command -> . setpos [ value value ]
    (15) command -> . setxy value value
    (16) command -> . setx value
    (17) command -> . sety value
    (18) command -> . home
    (19) command -> . pendown
    (20) command -> . pd
    (21) command -> . penup
    (22) command -> . pu
    (23) command -> . setpencolor [ value value value ]
    (24) command -> . make value value
    (25) command -> . make value value OPERATOR value
    (26) command -> . repeat value [ program ]
    (27) command -> . while [ value SIGN value ] [ program ]
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ] [ program ]
    (33) command -> . TO STR varlist program END
    (37) command -> . STR valuelist

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23
    if              shift and go to state 24
    ifelse          shift and go to state 25
    TO              shift and go to state 26
    STR             shift and go to state 27

    program                        shift and go to state 90
    command                        shift and go to state 2

state 88

    (28) command -> if value SIGN value [ program ] .

    forward         reduce using rule 28 (command -> if value SIGN value [ program ] .)
    fd              reduce using rule 28 (command -> if value SIGN value [ program ] .)
    right           reduce using rule 28 (command -> if value SIGN value [ program ] .)
    rt              reduce using rule 28 (command -> if value SIGN value [ program ] .)
    back            reduce using rule 28 (command -> if value SIGN value [ program ] .)
    bk              reduce using rule 28 (command -> if value SIGN value [ program ] .)
    left            reduce using rule 28 (command -> if value SIGN value [ program ] .)
    lt              reduce using rule 28 (command -> if value SIGN value [ program ] .)
    setpos          reduce using rule 28 (command -> if value SIGN value [ program ] .)
    setxy           reduce using rule 28 (command -> if value SIGN value [ program ] .)
    setx            reduce using rule 28 (command -> if value SIGN value [ program ] .)
    sety            reduce using rule 28 (command -> if value SIGN value [ program ] .)
    home            reduce using rule 28 (command -> if value SIGN value [ program ] .)
    pendown         reduce using rule 28 (command -> if value SIGN value [ program ] .)
    pd              reduce using rule 28 (command -> if value SIGN value [ program ] .)
    penup           reduce using rule 28 (command -> if value SIGN value [ program ] .)
    pu              reduce using rule 28 (command -> if value SIGN value [ program ] .)
    setpencolor     reduce using rule 28 (command -> if value SIGN value [ program ] .)
    make            reduce using rule 28 (command -> if value SIGN value [ program ] .)
    repeat          reduce using rule 28 (command -> if value SIGN value [ program ] .)
    while           reduce using rule 28 (command -> if value SIGN value [ program ] .)
    if              reduce using rule 28 (command -> if value SIGN value [ program ] .)
    ifelse          reduce using rule 28 (command -> if value SIGN value [ program ] .)
    TO              reduce using rule 28 (command -> if value SIGN value [ program ] .)
    STR             reduce using rule 28 (command -> if value SIGN value [ program ] .)
    $end            reduce using rule 28 (command -> if value SIGN value [ program ] .)
    ]               reduce using rule 28 (command -> if value SIGN value [ program ] .)
    END             reduce using rule 28 (command -> if value SIGN value [ program ] .)


state 89

    (29) command -> ifelse value SIGN value [ program ] . [ program ]

    [               shift and go to state 91


state 90

    (27) command -> while [ value SIGN value ] [ program . ]
    (2) program -> program . command
    (6) command -> . forward value
    (7) command -> . fd value
    (8) command -> . right value
    (9) command -> . rt value
    (10) command -> . back value
    (11) command -> . bk value
    (12) command -> . left value
    (13) command -> . lt value
    (14) command -> . setpos [ value value ]
    (15) command -> . setxy value value
    (16) command -> . setx value
    (17) command -> . sety value
    (18) command -> . home
    (19) command -> . pendown
    (20) command -> . pd
    (21) command -> . penup
    (22) command -> . pu
    (23) command -> . setpencolor [ value value value ]
    (24) command -> . make value value
    (25) command -> . make value value OPERATOR value
    (26) command -> . repeat value [ program ]
    (27) command -> . while [ value SIGN value ] [ program ]
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ] [ program ]
    (33) command -> . TO STR varlist program END
    (37) command -> . STR valuelist

    ]               shift and go to state 92
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23
    if              shift and go to state 24
    ifelse          shift and go to state 25
    TO              shift and go to state 26
    STR             shift and go to state 27

    command                        shift and go to state 28

state 91

    (29) command -> ifelse value SIGN value [ program ] [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (6) command -> . forward value
    (7) command -> . fd value
    (8) command -> . right value
    (9) command -> . rt value
    (10) command -> . back value
    (11) command -> . bk value
    (12) command -> . left value
    (13) command -> . lt value
    (14) command -> . setpos [ value value ]
    (15) command -> . setxy value value
    (16) command -> . setx value
    (17) command -> . sety value
    (18) command -> . home
    (19) command -> . pendown
    (20) command -> . pd
    (21) command -> . penup
    (22) command -> . pu
    (23) command -> . setpencolor [ value value value ]
    (24) command -> . make value value
    (25) command -> . make value value OPERATOR value
    (26) command -> . repeat value [ program ]
    (27) command -> . while [ value SIGN value ] [ program ]
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ] [ program ]
    (33) command -> . TO STR varlist program END
    (37) command -> . STR valuelist

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23
    if              shift and go to state 24
    ifelse          shift and go to state 25
    TO              shift and go to state 26
    STR             shift and go to state 27

    program                        shift and go to state 93
    command                        shift and go to state 2

state 92

    (27) command -> while [ value SIGN value ] [ program ] .

    forward         reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    fd              reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    right           reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    rt              reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    back            reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    bk              reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    left            reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    lt              reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    setpos          reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    setxy           reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    setx            reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    sety            reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    home            reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    pendown         reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    pd              reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    penup           reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    pu              reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    setpencolor     reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    make            reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    repeat          reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    while           reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    if              reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    ifelse          reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    TO              reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    STR             reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    $end            reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    ]               reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)
    END             reduce using rule 27 (command -> while [ value SIGN value ] [ program ] .)


state 93

    (29) command -> ifelse value SIGN value [ program ] [ program . ]
    (2) program -> program . command
    (6) command -> . forward value
    (7) command -> . fd value
    (8) command -> . right value
    (9) command -> . rt value
    (10) command -> . back value
    (11) command -> . bk value
    (12) command -> . left value
    (13) command -> . lt value
    (14) command -> . setpos [ value value ]
    (15) command -> . setxy value value
    (16) command -> . setx value
    (17) command -> . sety value
    (18) command -> . home
    (19) command -> . pendown
    (20) command -> . pd
    (21) command -> . penup
    (22) command -> . pu
    (23) command -> . setpencolor [ value value value ]
    (24) command -> . make value value
    (25) command -> . make value value OPERATOR value
    (26) command -> . repeat value [ program ]
    (27) command -> . while [ value SIGN value ] [ program ]
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ] [ program ]
    (33) command -> . TO STR varlist program END
    (37) command -> . STR valuelist

    ]               shift and go to state 94
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    back            shift and go to state 7
    bk              shift and go to state 8
    left            shift and go to state 9
    lt              shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    home            shift and go to state 15
    pendown         shift and go to state 16
    pd              shift and go to state 17
    penup           shift and go to state 18
    pu              shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    repeat          shift and go to state 22
    while           shift and go to state 23
    if              shift and go to state 24
    ifelse          shift and go to state 25
    TO              shift and go to state 26
    STR             shift and go to state 27

    command                        shift and go to state 28

state 94

    (29) command -> ifelse value SIGN value [ program ] [ program ] .

    forward         reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    fd              reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    right           reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    rt              reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    back            reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    bk              reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    left            reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    lt              reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    setpos          reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    setxy           reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    setx            reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    sety            reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    home            reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    pendown         reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    pd              reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    penup           reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    pu              reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    setpencolor     reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    make            reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    repeat          reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    while           reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    if              reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    ifelse          reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    TO              reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    STR             reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    $end            reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    ]               reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)
    END             reduce using rule 29 (command -> ifelse value SIGN value [ program ] [ program ] .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NUMBER in state 27 resolved as shift
WARNING: shift/reduce conflict for " in state 27 resolved as shift
WARNING: shift/reduce conflict for : in state 27 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 50 resolved as shift
WARNING: shift/reduce conflict for " in state 50 resolved as shift
WARNING: shift/reduce conflict for : in state 50 resolved as shift
